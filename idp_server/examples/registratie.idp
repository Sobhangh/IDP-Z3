vocabulary environment {
  type Location := {Flemish_Region, Walloon_Region, Brussels_Region}
  type Real_Estate_Type := {Residential, Residential_Building_Land, Other_Real_Estate}
  type Destination := {As_Family_Dwelling, For_Resale, Community_Purpose, Social_Housing, Social_Renting, Other_House, No_House}
  type Buyer_Type := {Natural_Person, Legal_Person, Mixed}
  type Year := {2015..2025}
  type Agreement_Dwelling_For_Social_Renting := {Less_Than_9_years, More_than_9_Or_9_years}
  type Transaction := {Public_Sale, Out_Hand, Public_Sale_Community}
  type Resale := {Less_Than_Three, Three_Or_More}
  type Seller := {Vlaams_Woningfonds, Gelijksoortige_Rechtspersoon_EER, Mpy_Erkend_Door_VMSW, Vlaamse_Mpy_Voor_Sociaal_Wonen, ErkendeSocialeHuisvestingsMpy}

  value: () ‚Üí ‚Ñù
  region : () ‚Üí Location

  // for Heritage
  type_of_real_estate : () ‚Üí Real_Estate_Type
  use : () ‚Üí Destination
  monument, heritage_investment, heritage_plan, additional_terms : () ‚Üí ùîπ

  // for Social_Dwelling
  buyer : () ‚Üí Buyer_Type
  seller : () ‚Üí Seller
  mortgage_loan_allowance : () ‚Üí ùîπ

  // For Professional_Purchase
  professional_buyer, professional_declaration_filed, guarantee_satisfied : () ‚Üí ùîπ
  additional_security_required, additional_security_satisfied : () ‚Üí ùîπ
  resale : () ‚Üí Resale
  transaction_type : () ‚Üí Transaction
  certification_date_sale : () ‚Üí Year

  // For Energy_Efficient_Dwelling
  domicile_established, clean_purchase, first_ownership : () ‚Üí ùîπ
  causal_connection, energy_renovation_planned : () ‚Üí ùîπ
  term_energy_renovation : () ‚Üí Year
  certification_date : () ‚Üí Year

  // For Dwelling_For_Social_Renting
  start_dt_dwelling_for_social_rent : () ‚Üí Year
  duration_of_agreement : () ‚Üí Agreement_Dwelling_For_Social_Renting


}

vocabulary decision {
  extern vocabulary environment

  type Registration_type := {Family_Dwelling, Social_Dwelling, Social_Purpose, Exchange_Unbuilt_Ground, Professional_Purchase, Energy_Efficient_Dwelling, Heritage, Dwelling_For_Social_Renting, Other}
  type Tax_Rate := {1, 2, 4, 6, 7, 10, 12}

  tax_rate : () ‚Üí Tax_Rate
  registration_type : () ‚Üí Registration_type
  tax_amount : () ‚Üí ‚Ñù
}

theory environment:environment {
  { professional_buyer() ‚Üê
      professional_declaration_filed()
      ‚àß guarantee_satisfied()
      ‚àß (additional_security_required() ‚àß additional_security_satisfied()
      ‚à® ¬¨ additional_security_required())
      ‚àß resale() = Three_Or_More.
  }
}

theory decision:decision {

  { tax_rate() = 1 ‚Üê
      registration_type() = Heritage
      ‚àß region() = Flemish_Region.

    tax_rate() = 2 ‚Üê // correct amount is 1.5
      registration_type() = Social_Dwelling
      ‚àß region() = Flemish_Region.

    tax_rate() = 4 ‚Üê
      registration_type() = Professional_Purchase
      ‚àß region() = Flemish_Region.

    tax_rate() = 6 ‚Üê
      (registration_type() = Energy_Efficient_Dwelling
      ‚à® registration_type() = Social_Purpose
      ‚à® registration_type() = Exchange_Unbuilt_Ground)
      ‚àß region() = Flemish_Region.

    tax_rate() = 7 ‚Üê
      (registration_type() = Family_Dwelling
      ‚à® registration_type() = Dwelling_For_Social_Renting)
      ‚àß region() = Flemish_Region.

    tax_rate() = 10 ‚Üê
      region() = Flemish_Region
      ‚àß registration_type() = Other.

    tax_rate() = 12 ‚Üê
      region() = Brussels_Region
      ‚à® region() = Walloon_Region.
  }

  // registration types currently only defined for Flanders.
  // When a choice is made for walonia or brussels, types can still be entered with a view to expandability

  [An Heritage is a residential monument in an heritage plan (with additional terms), used as family dwelling]
  (registration_type() = Heritage ‚áí
      type_of_real_estate() = Residential
      ‚àß monument()
      ‚àß use() = As_Family_Dwelling
      ‚àß heritage_investment()
      ‚àß heritage_plan()
      ‚àß additional_terms())
  .

  registration_type() = Social_Dwelling ‚áí
      buyer() = Natural_Person
      ‚àß type_of_real_estate() = Residential
      ‚àß use() = Social_Housing
      ‚àß (seller() = Vlaamse_Mpy_Voor_Sociaal_Wonen ‚à® seller() = ErkendeSocialeHuisvestingsMpy)
      ‚àß mortgage_loan_allowance()
  .

  registration_type() = Professional_Purchase ‚áí
      professional_buyer()
      ‚àß transaction_type()  ‚â† Public_Sale
      ‚àß use() = For_Resale
      ‚àß certification_date_sale() = certification_date() + 8
  .

  registration_type() = Energy_Efficient_Dwelling ‚áí
      type_of_real_estate() = Residential
      ‚àß buyer() = Natural_Person
      ‚àß domicile_established()
      ‚àß clean_purchase()
      ‚àß (first_ownership() ‚à® causal_connection())
      ‚àß energy_renovation_planned()
      ‚àß term_energy_renovation() = certification_date() + 5
  .

  [A sale by the Vlaams Woning Fonds for community purpose is for social purpose.](
  registration_type() = Social_Purpose ‚áí
      (seller() = Mpy_Erkend_Door_VMSW
      ‚à® seller() = Vlaams_Woningfonds
      ‚à® seller() = Gelijksoortige_Rechtspersoon_EER)
      ‚àß use() = Community_Purpose
  ).

  registration_type() = Exchange_Unbuilt_Ground ‚áí
      additional_terms()
      ‚àß ¬¨monument().

  registration_type() = Family_Dwelling ‚áí
      type_of_real_estate() = Residential
      ‚àß buyer() = Natural_Person
      ‚àß domicile_established()
      ‚àß clean_purchase()
      ‚àß (first_ownership() ‚à® causal_connection())
      ‚àß (¬¨ energy_renovation_planned() ‚à® term_energy_renovation() ‚â† certification_date() + 5)
  .

  registration_type() = Dwelling_For_Social_Renting ‚áí
      type_of_real_estate() = Residential
      ‚àß use() = Social_Renting
      ‚àß start_dt_dwelling_for_social_rent() = certification_date() + 3
      ‚àß duration_of_agreement() = Less_Than_9_years
  .

  registration_type() = Other ‚áí     // @EXPLAIN: registration_type cannot be Other
      registration_type() ‚â† Family_Dwelling
      ‚àß registration_type() ‚â† Social_Dwelling
      ‚àß registration_type() ‚â† Energy_Efficient_Dwelling
      ‚àß registration_type() ‚â† Dwelling_For_Social_Renting
      ‚àß registration_type() ‚â† Heritage
      ‚àß registration_type() ‚â† Professional_Purchase
      ‚àß registration_type() ‚â† Social_Purpose
      ‚àß registration_type() ‚â† Exchange_Unbuilt_Ground
  .

  tax_amount() = value() * tax_rate() / 100.

}

display {
    goal(`tax_amount).
    relevant(`tax_rate, `registration_type, `tax_amount).
    view() = normal.
    expand(`registration_type, `tax_rate).
}