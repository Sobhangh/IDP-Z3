vocabulary V {
    type ConfigObj := {o1, o2, o3 }
    type Fleet := {f1, f2}
    Vehicle : ConfigObj -> Bool
    fleetOf: ConfigObj -> Fleet
    weight : ConfigObj -> Int
    total, min, max, max2 : () -> Int
    fleetTotal, fleetCard, fleetMin: Fleet -> Int
}
theory T:V {
    Vehicle(o2). Vehicle(o3).
    fleetOf := {o1 -> f1, o2->f1, o3->f2}.
    #{V âˆˆ Vehicle: true} = 2.
    weight(o1)=3.
    weight(o2)=4.
    weight(o3)=5.
    total() = sum{{weight(x) | x in Vehicle}}.
    total() = sum{{weight(x) | x in ConfigObj: Vehicle(x)}}.
    min() = min{weight(x) | x in ConfigObj }.
    max() = max{weight(x) | x in ConfigObj }.
    max2() = max{weight(x) | x in ConfigObj}.

    !f in Fleet: fleetTotal(f) = sum(lambda x in Vehicle: if fleetOf(x)=f then weight(x) else 0).
    !f in Fleet: fleetTotal(f) = sum{{weight(x) | x in Vehicle: fleetOf(x)=f}}.

    !f in Fleet: fleetCard(f) = card{x in Vehicle: fleetOf(x)=f}.

    !f in Fleet: fleetMin(f) = min(lambda x in ConfigObj: if fleetOf(x)=f then weight(x) else 999).
    !f in Fleet: fleetMin(f) = min{weight(x) | x in ConfigObj: fleetOf(x)=f}.

}
procedure main() {
    pretty_print(Theory(T).formula())
    pretty_print(model_expand(T))
}