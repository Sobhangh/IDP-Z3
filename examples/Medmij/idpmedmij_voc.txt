vocabulary V {

    type DocumentID
    type Publiceerder
    type DocumentType
    type Ziekte
    type Schrijver

    type RechtType constructed from {R0Geen, R1Bestaan, R2Inhoud}

    ziektes( Ziekte )
    ziekte( Ziekte )

    // Documenten data
    type PropertyName
    type APropertyF constructed from { DocProp( DocumentType, PropertyName ) }
    type AProperty isa APropertyF
    property( AProperty )

    //De dokter (patient kiest)
    type EenRechtF constructed from { Recht( DocumentID, RechtType ) }
    type EenRecht isa EenRechtF
    rechten( EenRecht )

    type DossierEntryF constructed from { DosEntry( DocumentID, Publiceerder, Schrijver, Ziekte, DocumentType ) }
    type DossierEntry isa DossierEntryF
    dossier( DossierEntry )

   schrijverVan( DossierEntry ) : Schrijver
   idVan( DossierEntry ) : DocumentID
   typeVan( DossierEntry ) : DocumentType
   ziekteVan( DossierEntry ) : Ziekte

    globaalRecht : RechtType

    //De dokter (sector kiest)
    type AanvragerType

    // if given this property cannot be seen if defaultPropertyFilter is not given
    // or seen if the filter is given
    type BaseFilterF constructed from { BFilter( AanvragerType, DocumentType ) }
    type SpecificFilterF constructed from { SFilter( BaseFilterF, PropertyName ) }
    type BaseFilter isa BaseFilterF
    type SpecificFilter isa SpecificFilterF
    propertyFilter( SpecificFilter )
    defaultPropertyFilter( BaseFilter )

    // dokter info
    dokterPublisher : Publiceerder
    aanvrager : Schrijver
    aanvragerType( AanvragerType )

    //De output
    weetBestaan(DocumentID)
    kanInhoudZien(DocumentID)
    kanPropertyZien(DocumentID,PropertyName)
    wilVolledigZiekteDossierZien( Ziekte, DocumentID )
    wilVolledigZiekteDossierZienVoor( Ziekte, DocumentID )
    ziekteDossier( Ziekte, DocumentID )
    behandelendeArts( Schrijver )

}
