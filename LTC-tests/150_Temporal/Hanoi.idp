vocabulary V {
    type disc is {1..2}           
    type position is {1, 2, 3}      
    maxDisc: () -> disc
    <Action> moveDisc : () -> disc  
    <Action> moveTo: () -> position  
    <Temporal> onPosition : (disc * position) -> Bool 
    <Temporal> onTopOf : (disc * disc) -> Bool 
    <Helper> win : () -> Bool
}

theory LTC T : V {

	{
        Next[win()] <- Now[win()].
        Now[win()] <- (! s in disc : Now[onPosition(s,3)]).
    }
	! s in disc: not Now[onTopOf(s,Now[moveDisc()])].
	! s1 in disc, s2 in disc : s1 > s2 => not Now[onTopOf(s1,s2)].
	{ 
        ! s in disc : Start[onPosition(s, 1)].
        Next[onPosition(Now[moveDisc()],Now[moveTo()])] <- true.
        ! s in disc , pos in position : Next[onPosition(s,pos)] <- Now[onPosition(s,pos)] and s ~= Now[moveDisc()].
        ! s in disc , pos in position : Next[onPosition(s,pos)] <- Now[onPosition(s,pos)] and pos = Now[moveTo()].  
    }
	{ 
        ! x in disc : Start[onTopOf(x,x+1)] <- x =< maxDisc().
        ! x in disc , y in disc : Next[onTopOf(x,y)] <- Now[onTopOf(x,y)] and x ~= Now[moveDisc()] and y ~= Now[moveDisc()].
        ! x in disc , y in disc , p in position :Next[onTopOf(x,y)] <- x = Now[moveDisc()] and p = Now[moveTo()] and x ~= y
                            and Now[onPosition(y,p)] and ! z in disc: Now[onTopOf(z,y)] => x = z. 
        ! x in disc , z in disc , y in disc :Next[onTopOf(x,z)] <- Now[onTopOf(x,y)] and y = Now[moveDisc()] and Now[onTopOf(y,z)].
	}
}

structure S:V{
    maxDisc := 2.
}

procedure main(){
	simulate(T,S)
}