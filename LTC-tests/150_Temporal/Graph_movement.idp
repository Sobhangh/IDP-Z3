vocabulary V {
    type City is {A,B,C,D}
    Road: (City * City) -> Bool
    <Temporal> Position : (City) -> Bool
    <Action> Move: (City * City) -> Bool
    <Cause> Ct_Position : (City) -> Bool
    <Cause> Cf_Position : (City) -> Bool
}
vocabulary V2 {
    type City is {A,B,C,D}
    Road: (City * City) -> Bool
    <Temporal> Position : () -> City
    <Cause> Move: (City * City) -> Bool
}

theory LTC T:V {
    {
        !n in City: Next[Position(n)] <- Now[Ct_Position(n)].
        !n in City: Next[Position(n)] <- Now[Position(n)] and not Now[Cf_Position(n)].
        !n in City,m in City:  Now[Ct_Position(n)] <- Now[Move(m,n)].
        !n in City,m in City:  Now[Cf_Position(n)] <- Now[Move(n,m)].
    }
    !n in City,m in City: Now[Move(n,m)] => (Now[Position(n)] and Road(n,m)).
    #{n in City,m in City: Now[Move(n,m)]} =< 1.
    #{n in City: Now[Position(n)]} = 1.

}

theory LTC T2:V2 {
    {
        //!n in City: Next[Position()] = n <- ? m in City :Now[Move(m,n)].
        //!n in City: Next[Position()] = n <- Now[Position()] = n and not ? m in City: Now[Move(n,m)].
    }
    !n in City,m in City: Now[Move(n,m)] => (Now[Position()]=n and Road(n,m)).
    #{n in City,m in City: Now[Move(n,m)]} =< 1.
    #{n in City: Now[Position()]=n} = 1.

}

structure S:V {
    Road := {(A,B),(B,D),(D,A),(B,A)}.
}

structure S2:V2 {
    Road := {(A,B),(B,D),(D,A),(B,A)}.
}

procedure main () {
    s = initialize(T,S)
    print_struct(s)
    //simulate(T,S)
}
