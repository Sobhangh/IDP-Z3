vocabulary {
    type color := {red, blue, green}
    p, q: () → Bool
    important: Concept[() → Bool] → Bool
    opposite: color → color
    f: Concept -> Concept
}
theory {
  ~p() | q().
  important(`p).

  { !x in Concept[() → Bool]: important(x) <- ~(x=`q) & $(x)(). }
  !x in Concept[Concept[()->Bool] -> Bool]: !y in Concept[()->Bool]: $(x)(y).
  `opposite = `opposite.
  `opposite ~= `color.
  f(`f) = `f.
  !x in Concept[color->color]: $(x)(red) is enumerated.
}
structure S:V {
  opposite := {red->blue}.
}
procedure main() {
    pretty_print(Theory(T, S).formula())
}