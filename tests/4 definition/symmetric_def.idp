vocabulary {
	type node := {a,b,c}
	edge: (node ⨯ node) → Bool
	symmetric_symbol: Symbol -> Bool
	symmetric: (Symbol) → Bool
}
theory {
    edge(a,b).
	{! s in Symbol: symmetric_symbol(s) ← arity(s)=2 ∧ input_domain(s,1) = input_domain(s,2). }
	// TODO use symmetric_symbol(`p)
    { !`p in Symbol: symmetric(`p) <- arity(`p)=2 ∧ input_domain(`p,1) = input_domain(`p,2) & (!x, y : $(`p)(x,y) => $(`p)(y,x)). }
	symmetric(`edge).
}
display {
	expand(`edge).
}