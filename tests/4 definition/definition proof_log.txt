
- calling substitute
- with_arguments:
    self:
      class: AComparison
      code: codeOf(red) = b
      str: codeOf(red) = b
    e0:
      class: Constructor
      code: 'true'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      codeOf(red): None
      codeOf(blue): None
      c: None
      codeOf(red) = b: None
      red = c: None
      codeOf(red) = a: None
      codeOf(blue) = a: None
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AppliedSymbol
        code: codeOf(red)
        str: codeOf(red)
        co_constraint:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        codeOf(red): None
        codeOf(blue): None
        c: None
        codeOf(red) = b: None
        red = c: None
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - 'definition:'
    - calling substitute
    - with_arguments:
        self:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): None
          codeOf(blue): None
          c: None
          codeOf(red) = b: None
          red = c: None
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: Brackets
            code: (red = c ∧ codeOf(red) = a)
            str: (red = c ∧ codeOf(red) = a)
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          assignments:
            codeOf(red): None
            codeOf(blue): None
            c: None
            codeOf(red) = b: None
            red = c: None
            codeOf(red) = a: None
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: AConjunction
              code: red = c ∧ codeOf(red) = a
              str: red = c ∧ codeOf(red) = a
            e0:
              class: Constructor
              code: 'true'
              str: 'true'
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            assignments:
              codeOf(red): None
              codeOf(blue): None
              c: None
              codeOf(red) = b: None
              red = c: None
              codeOf(red) = a: None
              codeOf(blue) = a: None
              codeOf(blue) = b: None
              c = red: None
              c = blue: None
            todo: '[]'
        - processing
          - calling substitute
          - with_arguments:
              self:
                class: AComparison
                code: red = c
                str: red = c
              e0:
                class: Constructor
                code: 'true'
                str: 'true'
              e1:
                class: Constructor
                code: 'true'
                str: 'true'
              assignments:
                codeOf(red): None
                codeOf(blue): None
                c: None
                codeOf(red) = b: None
                red = c: None
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: Constructor
                  code: red
                  str: red
                e0:
                  class: Constructor
                  code: 'true'
                  str: 'true'
                e1:
                  class: Constructor
                  code: 'true'
                  str: 'true'
                assignments:
                  codeOf(red): None
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: None
                  red = c: None
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: Constructor
                code: red
                str: red
            - returning from substitute
            - calling substitute
            - with_arguments:
                self:
                  class: Variable
                  code: c
                  str: c
                e0:
                  class: Constructor
                  code: 'true'
                  str: 'true'
                e1:
                  class: Constructor
                  code: 'true'
                  str: 'true'
                assignments:
                  codeOf(red): None
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: None
                  red = c: None
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: Variable
                code: c
                str: c
            - returning from substitute
          - output:
              class: AComparison
              code: red = c
              str: red = c
          - returning from substitute
          - calling substitute
          - with_arguments:
              self:
                class: AComparison
                code: codeOf(red) = a
                str: codeOf(red) = a
              e0:
                class: Constructor
                code: 'true'
                str: 'true'
              e1:
                class: Constructor
                code: 'true'
                str: 'true'
              assignments:
                codeOf(red): None
                codeOf(blue): None
                c: None
                codeOf(red) = b: None
                red = c: None
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: codeOf(red)
                e0:
                  class: Constructor
                  code: 'true'
                  str: 'true'
                e1:
                  class: Constructor
                  code: 'true'
                  str: 'true'
                assignments:
                  codeOf(red): None
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: None
                  red = c: None
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
              - calling substitute
              - with_arguments:
                  self:
                    class: Constructor
                    code: red
                    str: red
                  e0:
                    class: Constructor
                    code: 'true'
                    str: 'true'
                  e1:
                    class: Constructor
                    code: 'true'
                    str: 'true'
                  assignments:
                    codeOf(red): None
                    codeOf(blue): None
                    c: None
                    codeOf(red) = b: None
                    red = c: None
                    codeOf(red) = a: None
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
                  todo: '[]'
              - processing
              - output:
                  class: Constructor
                  code: red
                  str: red
              - returning from substitute
            - output:
                class: AppliedSymbol
                code: codeOf(red)
                str: codeOf(red)
            - returning from substitute
            - calling substitute
            - with_arguments:
                self:
                  class: Constructor
                  code: a
                  str: a
                e0:
                  class: Constructor
                  code: 'true'
                  str: 'true'
                e1:
                  class: Constructor
                  code: 'true'
                  str: 'true'
                assignments:
                  codeOf(red): None
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: None
                  red = c: None
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: Constructor
                code: a
                str: a
            - returning from substitute
          - output:
              class: AComparison
              code: codeOf(red) = a
              str: codeOf(red) = a
          - returning from substitute
        - output:
            class: AConjunction
            code: red = c ∧ codeOf(red) = a
            str: red = c ∧ codeOf(red) = a
        - returning from substitute
      - output:
          class: Brackets
          code: (red = c ∧ codeOf(red) = a)
          str: (red = c ∧ codeOf(red) = a)
      - returning from substitute
      - calling substitute
      - with_arguments:
          self:
            class: Brackets
            code: (~(red = c) ∧ codeOf(red) = b)
            str: (~(red = c) ∧ codeOf(red) = b)
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          assignments:
            codeOf(red): None
            codeOf(blue): None
            c: None
            codeOf(red) = b: None
            red = c: None
            codeOf(red) = a: None
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: AConjunction
              code: ~(red = c) ∧ codeOf(red) = b
              str: ~(red = c) ∧ codeOf(red) = b
            e0:
              class: Constructor
              code: 'true'
              str: 'true'
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            assignments:
              codeOf(red): None
              codeOf(blue): None
              c: None
              codeOf(red) = b: None
              red = c: None
              codeOf(red) = a: None
              codeOf(blue) = a: None
              codeOf(blue) = b: None
              c = red: None
              c = blue: None
            todo: '[]'
        - processing
          - calling substitute
          - with_arguments:
              self:
                class: AUnary
                code: ~(red = c)
                str: ~(red = c)
              e0:
                class: Constructor
                code: 'true'
                str: 'true'
              e1:
                class: Constructor
                code: 'true'
                str: 'true'
              assignments:
                codeOf(red): None
                codeOf(blue): None
                c: None
                codeOf(red) = b: None
                red = c: None
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AComparison
                  code: red = c
                  str: red = c
                e0:
                  class: Constructor
                  code: 'true'
                  str: 'true'
                e1:
                  class: Constructor
                  code: 'true'
                  str: 'true'
                assignments:
                  codeOf(red): None
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: None
                  red = c: None
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
              - calling substitute
              - with_arguments:
                  self:
                    class: Constructor
                    code: red
                    str: red
                  e0:
                    class: Constructor
                    code: 'true'
                    str: 'true'
                  e1:
                    class: Constructor
                    code: 'true'
                    str: 'true'
                  assignments:
                    codeOf(red): None
                    codeOf(blue): None
                    c: None
                    codeOf(red) = b: None
                    red = c: None
                    codeOf(red) = a: None
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
                  todo: '[]'
              - processing
              - output:
                  class: Constructor
                  code: red
                  str: red
              - returning from substitute
              - calling substitute
              - with_arguments:
                  self:
                    class: Variable
                    code: c
                    str: c
                  e0:
                    class: Constructor
                    code: 'true'
                    str: 'true'
                  e1:
                    class: Constructor
                    code: 'true'
                    str: 'true'
                  assignments:
                    codeOf(red): None
                    codeOf(blue): None
                    c: None
                    codeOf(red) = b: None
                    red = c: None
                    codeOf(red) = a: None
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
                  todo: '[]'
              - processing
              - output:
                  class: Variable
                  code: c
                  str: c
              - returning from substitute
            - output:
                class: AComparison
                code: red = c
                str: red = c
            - returning from substitute
          - output:
              class: AUnary
              code: ~(red = c)
              str: ~(red = c)
          - returning from substitute
          - calling substitute
          - with_arguments:
              self:
                class: AComparison
                code: codeOf(red) = b
                str: codeOf(red) = b
              e0:
                class: Constructor
                code: 'true'
                str: 'true'
              e1:
                class: Constructor
                code: 'true'
                str: 'true'
              assignments:
                codeOf(red): None
                codeOf(blue): None
                c: None
                codeOf(red) = b: None
                red = c: None
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: codeOf(red)
                e0:
                  class: Constructor
                  code: 'true'
                  str: 'true'
                e1:
                  class: Constructor
                  code: 'true'
                  str: 'true'
                assignments:
                  codeOf(red): None
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: None
                  red = c: None
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
              - calling substitute
              - with_arguments:
                  self:
                    class: Constructor
                    code: red
                    str: red
                  e0:
                    class: Constructor
                    code: 'true'
                    str: 'true'
                  e1:
                    class: Constructor
                    code: 'true'
                    str: 'true'
                  assignments:
                    codeOf(red): None
                    codeOf(blue): None
                    c: None
                    codeOf(red) = b: None
                    red = c: None
                    codeOf(red) = a: None
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
                  todo: '[]'
              - processing
              - output:
                  class: Constructor
                  code: red
                  str: red
              - returning from substitute
            - output:
                class: AppliedSymbol
                code: codeOf(red)
                str: codeOf(red)
            - returning from substitute
            - calling substitute
            - with_arguments:
                self:
                  class: Constructor
                  code: b
                  str: b
                e0:
                  class: Constructor
                  code: 'true'
                  str: 'true'
                e1:
                  class: Constructor
                  code: 'true'
                  str: 'true'
                assignments:
                  codeOf(red): None
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: None
                  red = c: None
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: Constructor
                code: b
                str: b
            - returning from substitute
          - output:
              class: AComparison
              code: codeOf(red) = b
              str: codeOf(red) = b
          - returning from substitute
        - output:
            class: AConjunction
            code: ~(red = c) ∧ codeOf(red) = b
            str: ~(red = c) ∧ codeOf(red) = b
        - returning from substitute
      - output:
          class: Brackets
          code: (~(red = c) ∧ codeOf(red) = b)
          str: (~(red = c) ∧ codeOf(red) = b)
      - returning from substitute
    - output:
        class: ADisjunction
        code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: red
          str: red
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): None
          codeOf(blue): None
          c: None
          codeOf(red) = b: None
          red = c: None
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: red
        str: red
    - returning from substitute
  - output:
      class: AppliedSymbol
      code: codeOf(red)
      str: codeOf(red)
      co_constraint:
        class: ADisjunction
        code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: Constructor
        code: b
        str: b
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        codeOf(red): None
        codeOf(blue): None
        c: None
        codeOf(red) = b: None
        red = c: None
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
  - output:
      class: Constructor
      code: b
      str: b
  - returning from substitute
- output:
    class: AComparison
    code: codeOf(red) = b
    str: codeOf(red) = b
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: codeOf(red) = a ∨ codeOf(red) = b
      str: codeOf(red) = a ∨ codeOf(red) = b
    e0:
      class: Constructor
      code: 'true'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      codeOf(red): b
      codeOf(blue): None
      c: None
      codeOf(red) = b: 'true'
      red = c: None
      codeOf(red) = a: None
      codeOf(blue) = a: None
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: codeOf(red) = a
        str: codeOf(red) = a
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: None
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: codeOf(red)
          str: codeOf(red)
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: None
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: Constructor
            code: red
            str: red
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          assignments:
            codeOf(red): b
            codeOf(blue): None
            c: None
            codeOf(red) = b: 'true'
            red = c: None
            codeOf(red) = a: None
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
      - output:
          class: Constructor
          code: red
          str: red
      - returning from substitute
    - output:
        class: AppliedSymbol
        code: codeOf(red)
        str: codeOf(red)
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: a
          str: a
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: None
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: a
        str: a
    - returning from substitute
  - output:
      class: AComparison
      code: codeOf(red) = a
      str: codeOf(red) = a
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: codeOf(red) = b
        str: codeOf(red) = b
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: None
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: codeOf(red)
          str: codeOf(red)
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: None
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: Constructor
            code: red
            str: red
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          assignments:
            codeOf(red): b
            codeOf(blue): None
            c: None
            codeOf(red) = b: 'true'
            red = c: None
            codeOf(red) = a: None
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
      - output:
          class: Constructor
          code: red
          str: red
      - returning from substitute
    - output:
        class: AppliedSymbol
        code: codeOf(red)
        str: codeOf(red)
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: b
          str: b
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: None
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: b
        str: b
    - returning from substitute
  - output:
      class: AComparison
      code: codeOf(red) = b
      str: codeOf(red) = b
  - returning from substitute
- output:
    class: ADisjunction
    code: codeOf(red) = a ∨ codeOf(red) = b
    str: codeOf(red) = a ∨ codeOf(red) = b
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: codeOf(blue) = a ∨ codeOf(blue) = b
      str: codeOf(blue) = a ∨ codeOf(blue) = b
    e0:
      class: Constructor
      code: 'true'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      codeOf(red): b
      codeOf(blue): None
      c: None
      codeOf(red) = b: 'true'
      red = c: None
      codeOf(red) = a: None
      codeOf(blue) = a: None
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: codeOf(blue) = a
        str: codeOf(blue) = a
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: None
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: codeOf(blue)
          str: codeOf(blue)
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: None
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: Constructor
            code: blue
            str: blue
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          assignments:
            codeOf(red): b
            codeOf(blue): None
            c: None
            codeOf(red) = b: 'true'
            red = c: None
            codeOf(red) = a: None
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
      - output:
          class: Constructor
          code: blue
          str: blue
      - returning from substitute
    - output:
        class: AppliedSymbol
        code: codeOf(blue)
        str: codeOf(blue)
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: a
          str: a
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: None
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: a
        str: a
    - returning from substitute
  - output:
      class: AComparison
      code: codeOf(blue) = a
      str: codeOf(blue) = a
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: codeOf(blue) = b
        str: codeOf(blue) = b
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: None
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: codeOf(blue)
          str: codeOf(blue)
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: None
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: Constructor
            code: blue
            str: blue
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          assignments:
            codeOf(red): b
            codeOf(blue): None
            c: None
            codeOf(red) = b: 'true'
            red = c: None
            codeOf(red) = a: None
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
      - output:
          class: Constructor
          code: blue
          str: blue
      - returning from substitute
    - output:
        class: AppliedSymbol
        code: codeOf(blue)
        str: codeOf(blue)
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: b
          str: b
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: None
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: b
        str: b
    - returning from substitute
  - output:
      class: AComparison
      code: codeOf(blue) = b
      str: codeOf(blue) = b
  - returning from substitute
- output:
    class: ADisjunction
    code: codeOf(blue) = a ∨ codeOf(blue) = b
    str: codeOf(blue) = a ∨ codeOf(blue) = b
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: c = red ∨ c = blue
      str: c = red ∨ c = blue
    e0:
      class: Constructor
      code: 'true'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      codeOf(red): b
      codeOf(blue): None
      c: None
      codeOf(red) = b: 'true'
      red = c: None
      codeOf(red) = a: None
      codeOf(blue) = a: None
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: c = red
        str: c = red
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: None
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: Variable
          code: c
          str: c
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: None
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Variable
        code: c
        str: c
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: red
          str: red
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: None
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: red
        str: red
    - returning from substitute
  - output:
      class: AComparison
      code: c = red
      str: c = red
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: c = blue
        str: c = blue
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: None
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: Variable
          code: c
          str: c
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: None
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Variable
        code: c
        str: c
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: blue
          str: blue
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: None
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: blue
        str: blue
    - returning from substitute
  - output:
      class: AComparison
      code: c = blue
      str: c = blue
  - returning from substitute
- output:
    class: ADisjunction
    code: c = red ∨ c = blue
    str: c = red ∨ c = blue
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: AComparison
      code: codeOf(red) = b
      str: codeOf(red) = b
    e0:
      class: AppliedSymbol
      code: codeOf(red)
      str: codeOf(red)
      co_constraint:
        class: ADisjunction
        code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
    e1:
      class: Constructor
      code: b
      str: b
    assignments:
      codeOf(red): b
      codeOf(blue): None
      c: None
      codeOf(red) = b: 'true'
      red = c: None
      codeOf(red) = a: None
      codeOf(blue) = a: None
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AppliedSymbol
        code: codeOf(red)
        str: codeOf(red)
        co_constraint:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
      e0:
        class: AppliedSymbol
        code: codeOf(red)
        str: codeOf(red)
        co_constraint:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
      e1:
        class: Constructor
        code: b
        str: b
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: None
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - 'definition:'
    - calling substitute
    - with_arguments:
        self:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        e0:
          class: AppliedSymbol
          code: codeOf(red)
          str: codeOf(red)
          co_constraint:
            class: ADisjunction
            code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
            str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        e1:
          class: Constructor
          code: b
          str: b
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: None
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: Brackets
            code: (red = c ∧ codeOf(red) = a)
            str: (red = c ∧ codeOf(red) = a)
          e0:
            class: AppliedSymbol
            code: codeOf(red)
            str: codeOf(red)
            co_constraint:
              class: ADisjunction
              code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
              str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          e1:
            class: Constructor
            code: b
            str: b
          assignments:
            codeOf(red): b
            codeOf(blue): None
            c: None
            codeOf(red) = b: 'true'
            red = c: None
            codeOf(red) = a: None
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: AConjunction
              code: red = c ∧ codeOf(red) = a
              str: red = c ∧ codeOf(red) = a
            e0:
              class: AppliedSymbol
              code: codeOf(red)
              str: codeOf(red)
              co_constraint:
                class: ADisjunction
                code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
            e1:
              class: Constructor
              code: b
              str: b
            assignments:
              codeOf(red): b
              codeOf(blue): None
              c: None
              codeOf(red) = b: 'true'
              red = c: None
              codeOf(red) = a: None
              codeOf(blue) = a: None
              codeOf(blue) = b: None
              c = red: None
              c = blue: None
            todo: '[]'
        - processing
          - calling substitute
          - with_arguments:
              self:
                class: AComparison
                code: red = c
                str: red = c
              e0:
                class: AppliedSymbol
                code: codeOf(red)
                str: codeOf(red)
                co_constraint:
                  class: ADisjunction
                  code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                  str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
              e1:
                class: Constructor
                code: b
                str: b
              assignments:
                codeOf(red): b
                codeOf(blue): None
                c: None
                codeOf(red) = b: 'true'
                red = c: None
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: Constructor
                  code: red
                  str: red
                e0:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: codeOf(red)
                  co_constraint:
                    class: ADisjunction
                    code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                    str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                e1:
                  class: Constructor
                  code: b
                  str: b
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: None
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: Constructor
                code: red
                str: red
            - returning from substitute
            - calling substitute
            - with_arguments:
                self:
                  class: Variable
                  code: c
                  str: c
                e0:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: codeOf(red)
                  co_constraint:
                    class: ADisjunction
                    code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                    str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                e1:
                  class: Constructor
                  code: b
                  str: b
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: None
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: Variable
                code: c
                str: c
            - returning from substitute
          - output:
              class: AComparison
              code: red = c
              str: red = c
          - returning from substitute
          - calling substitute
          - with_arguments:
              self:
                class: AComparison
                code: codeOf(red) = a
                str: codeOf(red) = a
              e0:
                class: AppliedSymbol
                code: codeOf(red)
                str: codeOf(red)
                co_constraint:
                  class: ADisjunction
                  code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                  str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
              e1:
                class: Constructor
                code: b
                str: b
              assignments:
                codeOf(red): b
                codeOf(blue): None
                c: None
                codeOf(red) = b: 'true'
                red = c: None
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: codeOf(red)
                e0:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: codeOf(red)
                  co_constraint:
                    class: ADisjunction
                    code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                    str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                e1:
                  class: Constructor
                  code: b
                  str: b
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: None
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: AppliedSymbol
                code: codeOf(red)
                str: b
            - returning from substitute
            - calling substitute
            - with_arguments:
                self:
                  class: Constructor
                  code: a
                  str: a
                e0:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: codeOf(red)
                  co_constraint:
                    class: ADisjunction
                    code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                    str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                e1:
                  class: Constructor
                  code: b
                  str: b
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: None
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: Constructor
                code: a
                str: a
            - returning from substitute
          - output:
              class: AComparison
              code: codeOf(red) = a
              str: 'false'
          - returning from substitute
        - output:
            class: AConjunction
            code: red = c ∧ codeOf(red) = a
            str: 'false'
        - returning from substitute
      - output:
          class: Brackets
          code: (red = c ∧ codeOf(red) = a)
          str: (false)
      - returning from substitute
      - calling substitute
      - with_arguments:
          self:
            class: Brackets
            code: (~(red = c) ∧ codeOf(red) = b)
            str: (~(red = c) ∧ codeOf(red) = b)
          e0:
            class: AppliedSymbol
            code: codeOf(red)
            str: codeOf(red)
            co_constraint:
              class: ADisjunction
              code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
              str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          e1:
            class: Constructor
            code: b
            str: b
          assignments:
            codeOf(red): b
            codeOf(blue): None
            c: None
            codeOf(red) = b: 'true'
            red = c: None
            codeOf(red) = a: None
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: AConjunction
              code: ~(red = c) ∧ codeOf(red) = b
              str: ~(red = c) ∧ codeOf(red) = b
            e0:
              class: AppliedSymbol
              code: codeOf(red)
              str: codeOf(red)
              co_constraint:
                class: ADisjunction
                code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
            e1:
              class: Constructor
              code: b
              str: b
            assignments:
              codeOf(red): b
              codeOf(blue): None
              c: None
              codeOf(red) = b: 'true'
              red = c: None
              codeOf(red) = a: None
              codeOf(blue) = a: None
              codeOf(blue) = b: None
              c = red: None
              c = blue: None
            todo: '[]'
        - processing
          - calling substitute
          - with_arguments:
              self:
                class: AUnary
                code: ~(red = c)
                str: ~(red = c)
              e0:
                class: AppliedSymbol
                code: codeOf(red)
                str: codeOf(red)
                co_constraint:
                  class: ADisjunction
                  code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                  str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
              e1:
                class: Constructor
                code: b
                str: b
              assignments:
                codeOf(red): b
                codeOf(blue): None
                c: None
                codeOf(red) = b: 'true'
                red = c: None
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AComparison
                  code: red = c
                  str: red = c
                e0:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: codeOf(red)
                  co_constraint:
                    class: ADisjunction
                    code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                    str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                e1:
                  class: Constructor
                  code: b
                  str: b
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: None
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
              - calling substitute
              - with_arguments:
                  self:
                    class: Constructor
                    code: red
                    str: red
                  e0:
                    class: AppliedSymbol
                    code: codeOf(red)
                    str: codeOf(red)
                    co_constraint:
                      class: ADisjunction
                      code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                      str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                  e1:
                    class: Constructor
                    code: b
                    str: b
                  assignments:
                    codeOf(red): b
                    codeOf(blue): None
                    c: None
                    codeOf(red) = b: 'true'
                    red = c: None
                    codeOf(red) = a: None
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
                  todo: '[]'
              - processing
              - output:
                  class: Constructor
                  code: red
                  str: red
              - returning from substitute
              - calling substitute
              - with_arguments:
                  self:
                    class: Variable
                    code: c
                    str: c
                  e0:
                    class: AppliedSymbol
                    code: codeOf(red)
                    str: codeOf(red)
                    co_constraint:
                      class: ADisjunction
                      code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                      str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                  e1:
                    class: Constructor
                    code: b
                    str: b
                  assignments:
                    codeOf(red): b
                    codeOf(blue): None
                    c: None
                    codeOf(red) = b: 'true'
                    red = c: None
                    codeOf(red) = a: None
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
                  todo: '[]'
              - processing
              - output:
                  class: Variable
                  code: c
                  str: c
              - returning from substitute
            - output:
                class: AComparison
                code: red = c
                str: red = c
            - returning from substitute
          - output:
              class: AUnary
              code: ~(red = c)
              str: ~(red = c)
          - returning from substitute
          - calling substitute
          - with_arguments:
              self:
                class: AComparison
                code: codeOf(red) = b
                str: codeOf(red) = b
              e0:
                class: AppliedSymbol
                code: codeOf(red)
                str: codeOf(red)
                co_constraint:
                  class: ADisjunction
                  code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                  str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
              e1:
                class: Constructor
                code: b
                str: b
              assignments:
                codeOf(red): b
                codeOf(blue): None
                c: None
                codeOf(red) = b: 'true'
                red = c: None
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: codeOf(red)
                e0:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: codeOf(red)
                  co_constraint:
                    class: ADisjunction
                    code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                    str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                e1:
                  class: Constructor
                  code: b
                  str: b
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: None
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: AppliedSymbol
                code: codeOf(red)
                str: b
            - returning from substitute
            - calling substitute
            - with_arguments:
                self:
                  class: Constructor
                  code: b
                  str: b
                e0:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: codeOf(red)
                  co_constraint:
                    class: ADisjunction
                    code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                    str: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
                e1:
                  class: Constructor
                  code: b
                  str: b
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: None
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: Constructor
                code: b
                str: b
            - returning from substitute
          - output:
              class: AComparison
              code: codeOf(red) = b
              str: 'true'
          - returning from substitute
        - output:
            class: AConjunction
            code: ~(red = c) ∧ codeOf(red) = b
            str: ~(red = c)
        - returning from substitute
      - output:
          class: Brackets
          code: (~(red = c) ∧ codeOf(red) = b)
          str: (~(red = c))
      - returning from substitute
    - output:
        class: ADisjunction
        code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        str: (~(red = c))
    - returning from substitute
  - output:
      class: AppliedSymbol
      code: codeOf(red)
      str: b
      co_constraint:
        class: ADisjunction
        code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        str: (~(red = c))
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: Constructor
        code: b
        str: b
      e0:
        class: AppliedSymbol
        code: codeOf(red)
        str: b
        co_constraint:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: (~(red = c))
      e1:
        class: Constructor
        code: b
        str: b
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: None
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[(red = c, false)]'
  - processing
  - output:
      class: Constructor
      code: b
      str: b
  - returning from substitute
- output:
    class: AComparison
    code: codeOf(red) = b
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: AComparison
      code: codeOf(red) = b
      str: 'true'
    e0:
      class: AComparison
      code: red = c
      str: red = c
    e1:
      class: Constructor
      code: 'false'
      str: 'false'
    assignments:
      codeOf(red): b
      codeOf(blue): None
      c: None
      codeOf(red) = b: 'true'
      red = c: 'false'
      codeOf(red) = a: None
      codeOf(blue) = a: None
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AppliedSymbol
        code: codeOf(red)
        str: b
        co_constraint:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: (~(red = c))
      e0:
        class: AComparison
        code: red = c
        str: red = c
      e1:
        class: Constructor
        code: 'false'
        str: 'false'
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
  - processing
    - 'definition:'
    - calling substitute
    - with_arguments:
        self:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: (~(red = c))
        e0:
          class: AComparison
          code: red = c
          str: red = c
        e1:
          class: Constructor
          code: 'false'
          str: 'false'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: Brackets
            code: (red = c ∧ codeOf(red) = a)
            str: (false)
          e0:
            class: AComparison
            code: red = c
            str: red = c
          e1:
            class: Constructor
            code: 'false'
            str: 'false'
          assignments:
            codeOf(red): b
            codeOf(blue): None
            c: None
            codeOf(red) = b: 'true'
            red = c: 'false'
            codeOf(red) = a: None
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: AConjunction
              code: red = c ∧ codeOf(red) = a
              str: 'false'
            e0:
              class: AComparison
              code: red = c
              str: red = c
            e1:
              class: Constructor
              code: 'false'
              str: 'false'
            assignments:
              codeOf(red): b
              codeOf(blue): None
              c: None
              codeOf(red) = b: 'true'
              red = c: 'false'
              codeOf(red) = a: None
              codeOf(blue) = a: None
              codeOf(blue) = b: None
              c = red: None
              c = blue: None
        - processing
          - calling substitute
          - with_arguments:
              self:
                class: AComparison
                code: codeOf(red) = a
                str: 'false'
              e0:
                class: AComparison
                code: red = c
                str: red = c
              e1:
                class: Constructor
                code: 'false'
                str: 'false'
              assignments:
                codeOf(red): b
                codeOf(blue): None
                c: None
                codeOf(red) = b: 'true'
                red = c: 'false'
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: b
                e0:
                  class: AComparison
                  code: red = c
                  str: red = c
                e1:
                  class: Constructor
                  code: 'false'
                  str: 'false'
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
            - processing
              - calling substitute
              - with_arguments:
                  self:
                    class: Constructor
                    code: red
                    str: red
                  e0:
                    class: AComparison
                    code: red = c
                    str: red = c
                  e1:
                    class: Constructor
                    code: 'false'
                    str: 'false'
                  assignments:
                    codeOf(red): b
                    codeOf(blue): None
                    c: None
                    codeOf(red) = b: 'true'
                    red = c: 'false'
                    codeOf(red) = a: None
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
              - processing
              - output:
                  class: Constructor
                  code: red
                  str: red
              - returning from substitute
            - output:
                class: AppliedSymbol
                code: codeOf(red)
                str: b
            - returning from substitute
            - calling substitute
            - with_arguments:
                self:
                  class: Constructor
                  code: a
                  str: a
                e0:
                  class: AComparison
                  code: red = c
                  str: red = c
                e1:
                  class: Constructor
                  code: 'false'
                  str: 'false'
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
            - processing
            - output:
                class: Constructor
                code: a
                str: a
            - returning from substitute
          - output:
              class: AComparison
              code: codeOf(red) = a
              str: 'false'
          - returning from substitute
        - output:
            class: AConjunction
            code: red = c ∧ codeOf(red) = a
            str: 'false'
        - returning from substitute
      - output:
          class: Brackets
          code: (red = c ∧ codeOf(red) = a)
          str: (false)
      - returning from substitute
      - calling substitute
      - with_arguments:
          self:
            class: Brackets
            code: (~(red = c) ∧ codeOf(red) = b)
            str: (~(red = c))
          e0:
            class: AComparison
            code: red = c
            str: red = c
          e1:
            class: Constructor
            code: 'false'
            str: 'false'
          assignments:
            codeOf(red): b
            codeOf(blue): None
            c: None
            codeOf(red) = b: 'true'
            red = c: 'false'
            codeOf(red) = a: None
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: AConjunction
              code: ~(red = c) ∧ codeOf(red) = b
              str: ~(red = c)
            e0:
              class: AComparison
              code: red = c
              str: red = c
            e1:
              class: Constructor
              code: 'false'
              str: 'false'
            assignments:
              codeOf(red): b
              codeOf(blue): None
              c: None
              codeOf(red) = b: 'true'
              red = c: 'false'
              codeOf(red) = a: None
              codeOf(blue) = a: None
              codeOf(blue) = b: None
              c = red: None
              c = blue: None
        - processing
          - calling substitute
          - with_arguments:
              self:
                class: AUnary
                code: ~(red = c)
                str: ~(red = c)
              e0:
                class: AComparison
                code: red = c
                str: red = c
              e1:
                class: Constructor
                code: 'false'
                str: 'false'
              assignments:
                codeOf(red): b
                codeOf(blue): None
                c: None
                codeOf(red) = b: 'true'
                red = c: 'false'
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AComparison
                  code: red = c
                  str: red = c
                e0:
                  class: AComparison
                  code: red = c
                  str: red = c
                e1:
                  class: Constructor
                  code: 'false'
                  str: 'false'
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
            - processing
            - output:
                class: AComparison
                code: red = c
                str: 'false'
            - returning from substitute
          - output:
              class: AUnary
              code: ~(red = c)
              str: 'true'
          - returning from substitute
          - calling substitute
          - with_arguments:
              self:
                class: AComparison
                code: codeOf(red) = b
                str: 'true'
              e0:
                class: AComparison
                code: red = c
                str: 'false'
              e1:
                class: Constructor
                code: 'false'
                str: 'false'
              assignments:
                codeOf(red): b
                codeOf(blue): None
                c: None
                codeOf(red) = b: 'true'
                red = c: 'false'
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: b
                e0:
                  class: AComparison
                  code: red = c
                  str: 'false'
                e1:
                  class: Constructor
                  code: 'false'
                  str: 'false'
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
            - processing
              - calling substitute
              - with_arguments:
                  self:
                    class: Constructor
                    code: red
                    str: red
                  e0:
                    class: AComparison
                    code: red = c
                    str: 'false'
                  e1:
                    class: Constructor
                    code: 'false'
                    str: 'false'
                  assignments:
                    codeOf(red): b
                    codeOf(blue): None
                    c: None
                    codeOf(red) = b: 'true'
                    red = c: 'false'
                    codeOf(red) = a: None
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
              - processing
              - output:
                  class: Constructor
                  code: red
                  str: red
              - returning from substitute
            - output:
                class: AppliedSymbol
                code: codeOf(red)
                str: b
            - returning from substitute
            - calling substitute
            - with_arguments:
                self:
                  class: Constructor
                  code: b
                  str: b
                e0:
                  class: AComparison
                  code: red = c
                  str: 'false'
                e1:
                  class: Constructor
                  code: 'false'
                  str: 'false'
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
            - processing
            - output:
                class: Constructor
                code: b
                str: b
            - returning from substitute
          - output:
              class: AComparison
              code: codeOf(red) = b
              str: 'true'
          - returning from substitute
        - output:
            class: AConjunction
            code: ~(red = c) ∧ codeOf(red) = b
            str: 'true'
        - returning from substitute
      - output:
          class: Brackets
          code: (~(red = c) ∧ codeOf(red) = b)
          str: (true)
      - returning from substitute
    - output:
        class: ADisjunction
        code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        str: 'true'
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: red
          str: red
        e0:
          class: AComparison
          code: red = c
          str: 'false'
        e1:
          class: Constructor
          code: 'false'
          str: 'false'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
    - processing
    - output:
        class: Constructor
        code: red
        str: red
    - returning from substitute
  - output:
      class: AppliedSymbol
      code: codeOf(red)
      str: b
      co_constraint:
        class: ADisjunction
        code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        str: 'true'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: Constructor
        code: b
        str: b
      e0:
        class: AComparison
        code: red = c
        str: 'false'
      e1:
        class: Constructor
        code: 'false'
        str: 'false'
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
  - processing
  - output:
      class: Constructor
      code: b
      str: b
  - returning from substitute
- output:
    class: AComparison
    code: codeOf(red) = b
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: codeOf(red) = a ∨ codeOf(red) = b
      str: codeOf(red) = a ∨ codeOf(red) = b
    e0:
      class: AppliedSymbol
      code: codeOf(red)
      str: b
      co_constraint:
        class: ADisjunction
        code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        str: 'true'
    e1:
      class: Constructor
      code: b
      str: b
    assignments:
      codeOf(red): b
      codeOf(blue): None
      c: None
      codeOf(red) = b: 'true'
      red = c: 'false'
      codeOf(red) = a: None
      codeOf(blue) = a: None
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: codeOf(red) = a
        str: codeOf(red) = a
      e0:
        class: AppliedSymbol
        code: codeOf(red)
        str: b
        co_constraint:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: 'true'
      e1:
        class: Constructor
        code: b
        str: b
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: codeOf(red)
          str: codeOf(red)
        e0:
          class: AppliedSymbol
          code: codeOf(red)
          str: b
          co_constraint:
            class: ADisjunction
            code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
            str: 'true'
        e1:
          class: Constructor
          code: b
          str: b
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: AppliedSymbol
        code: codeOf(red)
        str: b
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: a
          str: a
        e0:
          class: AppliedSymbol
          code: codeOf(red)
          str: b
          co_constraint:
            class: ADisjunction
            code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
            str: 'true'
        e1:
          class: Constructor
          code: b
          str: b
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: a
        str: a
    - returning from substitute
  - output:
      class: AComparison
      code: codeOf(red) = a
      str: 'false'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: codeOf(red) = b
        str: codeOf(red) = b
      e0:
        class: AppliedSymbol
        code: codeOf(red)
        str: b
        co_constraint:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: 'true'
      e1:
        class: Constructor
        code: b
        str: b
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: codeOf(red)
          str: codeOf(red)
        e0:
          class: AppliedSymbol
          code: codeOf(red)
          str: b
          co_constraint:
            class: ADisjunction
            code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
            str: 'true'
        e1:
          class: Constructor
          code: b
          str: b
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: AppliedSymbol
        code: codeOf(red)
        str: b
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: b
          str: b
        e0:
          class: AppliedSymbol
          code: codeOf(red)
          str: b
          co_constraint:
            class: ADisjunction
            code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
            str: 'true'
        e1:
          class: Constructor
          code: b
          str: b
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: b
        str: b
    - returning from substitute
  - output:
      class: AComparison
      code: codeOf(red) = b
      str: 'true'
  - returning from substitute
- output:
    class: ADisjunction
    code: codeOf(red) = a ∨ codeOf(red) = b
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: AComparison
      code: codeOf(red) = b
      str: 'true'
    e0:
      class: AComparison
      code: codeOf(red) = b
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      codeOf(red): b
      codeOf(blue): None
      c: None
      codeOf(red) = b: 'true'
      red = c: 'false'
      codeOf(red) = a: None
      codeOf(blue) = a: None
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
    todo: '[]'
- processing
- output:
    class: AComparison
    code: codeOf(red) = b
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: codeOf(red) = a ∨ codeOf(red) = b
      str: 'true'
    e0:
      class: AComparison
      code: codeOf(red) = b
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      codeOf(red): b
      codeOf(blue): None
      c: None
      codeOf(red) = b: 'true'
      red = c: 'false'
      codeOf(red) = a: None
      codeOf(blue) = a: None
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: codeOf(red) = a
        str: 'false'
      e0:
        class: AComparison
        code: codeOf(red) = b
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: codeOf(red)
          str: b
        e0:
          class: AComparison
          code: codeOf(red) = b
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: Constructor
            code: red
            str: red
          e0:
            class: AComparison
            code: codeOf(red) = b
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          assignments:
            codeOf(red): b
            codeOf(blue): None
            c: None
            codeOf(red) = b: 'true'
            red = c: 'false'
            codeOf(red) = a: None
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
      - output:
          class: Constructor
          code: red
          str: red
      - returning from substitute
    - output:
        class: AppliedSymbol
        code: codeOf(red)
        str: b
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: a
          str: a
        e0:
          class: AComparison
          code: codeOf(red) = b
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: a
        str: a
    - returning from substitute
  - output:
      class: AComparison
      code: codeOf(red) = a
      str: 'false'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: codeOf(red) = b
        str: 'true'
      e0:
        class: AComparison
        code: codeOf(red) = b
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
  - output:
      class: AComparison
      code: codeOf(red) = b
      str: 'true'
  - returning from substitute
- output:
    class: ADisjunction
    code: codeOf(red) = a ∨ codeOf(red) = b
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: AComparison
      code: codeOf(red) = b
      str: 'true'
    e0:
      class: AComparison
      code: red = c
      str: 'false'
    e1:
      class: Constructor
      code: 'false'
      str: 'false'
    assignments:
      codeOf(red): b
      codeOf(blue): None
      c: None
      codeOf(red) = b: 'true'
      red = c: 'false'
      codeOf(red) = a: None
      codeOf(blue) = a: None
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AppliedSymbol
        code: codeOf(red)
        str: b
        co_constraint:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: 'true'
      e0:
        class: AComparison
        code: red = c
        str: 'false'
      e1:
        class: Constructor
        code: 'false'
        str: 'false'
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - 'definition:'
    - calling substitute
    - with_arguments:
        self:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: 'true'
        e0:
          class: AComparison
          code: red = c
          str: 'false'
        e1:
          class: Constructor
          code: 'false'
          str: 'false'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: Brackets
            code: (red = c ∧ codeOf(red) = a)
            str: (false)
          e0:
            class: AComparison
            code: red = c
            str: 'false'
          e1:
            class: Constructor
            code: 'false'
            str: 'false'
          assignments:
            codeOf(red): b
            codeOf(blue): None
            c: None
            codeOf(red) = b: 'true'
            red = c: 'false'
            codeOf(red) = a: None
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: AConjunction
              code: red = c ∧ codeOf(red) = a
              str: 'false'
            e0:
              class: AComparison
              code: red = c
              str: 'false'
            e1:
              class: Constructor
              code: 'false'
              str: 'false'
            assignments:
              codeOf(red): b
              codeOf(blue): None
              c: None
              codeOf(red) = b: 'true'
              red = c: 'false'
              codeOf(red) = a: None
              codeOf(blue) = a: None
              codeOf(blue) = b: None
              c = red: None
              c = blue: None
            todo: '[]'
        - processing
          - calling substitute
          - with_arguments:
              self:
                class: AComparison
                code: codeOf(red) = a
                str: 'false'
              e0:
                class: AComparison
                code: red = c
                str: 'false'
              e1:
                class: Constructor
                code: 'false'
                str: 'false'
              assignments:
                codeOf(red): b
                codeOf(blue): None
                c: None
                codeOf(red) = b: 'true'
                red = c: 'false'
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: b
                e0:
                  class: AComparison
                  code: red = c
                  str: 'false'
                e1:
                  class: Constructor
                  code: 'false'
                  str: 'false'
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
              - calling substitute
              - with_arguments:
                  self:
                    class: Constructor
                    code: red
                    str: red
                  e0:
                    class: AComparison
                    code: red = c
                    str: 'false'
                  e1:
                    class: Constructor
                    code: 'false'
                    str: 'false'
                  assignments:
                    codeOf(red): b
                    codeOf(blue): None
                    c: None
                    codeOf(red) = b: 'true'
                    red = c: 'false'
                    codeOf(red) = a: None
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
                  todo: '[]'
              - processing
              - output:
                  class: Constructor
                  code: red
                  str: red
              - returning from substitute
            - output:
                class: AppliedSymbol
                code: codeOf(red)
                str: b
            - returning from substitute
            - calling substitute
            - with_arguments:
                self:
                  class: Constructor
                  code: a
                  str: a
                e0:
                  class: AComparison
                  code: red = c
                  str: 'false'
                e1:
                  class: Constructor
                  code: 'false'
                  str: 'false'
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: Constructor
                code: a
                str: a
            - returning from substitute
          - output:
              class: AComparison
              code: codeOf(red) = a
              str: 'false'
          - returning from substitute
        - output:
            class: AConjunction
            code: red = c ∧ codeOf(red) = a
            str: 'false'
        - returning from substitute
      - output:
          class: Brackets
          code: (red = c ∧ codeOf(red) = a)
          str: (false)
      - returning from substitute
      - calling substitute
      - with_arguments:
          self:
            class: Brackets
            code: (~(red = c) ∧ codeOf(red) = b)
            str: (true)
          e0:
            class: AComparison
            code: red = c
            str: 'false'
          e1:
            class: Constructor
            code: 'false'
            str: 'false'
          assignments:
            codeOf(red): b
            codeOf(blue): None
            c: None
            codeOf(red) = b: 'true'
            red = c: 'false'
            codeOf(red) = a: None
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: AConjunction
              code: ~(red = c) ∧ codeOf(red) = b
              str: 'true'
            e0:
              class: AComparison
              code: red = c
              str: 'false'
            e1:
              class: Constructor
              code: 'false'
              str: 'false'
            assignments:
              codeOf(red): b
              codeOf(blue): None
              c: None
              codeOf(red) = b: 'true'
              red = c: 'false'
              codeOf(red) = a: None
              codeOf(blue) = a: None
              codeOf(blue) = b: None
              c = red: None
              c = blue: None
            todo: '[]'
        - processing
          - calling substitute
          - with_arguments:
              self:
                class: AUnary
                code: ~(red = c)
                str: 'true'
              e0:
                class: AComparison
                code: red = c
                str: 'false'
              e1:
                class: Constructor
                code: 'false'
                str: 'false'
              assignments:
                codeOf(red): b
                codeOf(blue): None
                c: None
                codeOf(red) = b: 'true'
                red = c: 'false'
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AComparison
                  code: red = c
                  str: 'false'
                e0:
                  class: AComparison
                  code: red = c
                  str: 'false'
                e1:
                  class: Constructor
                  code: 'false'
                  str: 'false'
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: AComparison
                code: red = c
                str: 'false'
            - returning from substitute
          - output:
              class: AUnary
              code: ~(red = c)
              str: 'true'
          - returning from substitute
          - calling substitute
          - with_arguments:
              self:
                class: AComparison
                code: codeOf(red) = b
                str: 'true'
              e0:
                class: AComparison
                code: red = c
                str: 'false'
              e1:
                class: Constructor
                code: 'false'
                str: 'false'
              assignments:
                codeOf(red): b
                codeOf(blue): None
                c: None
                codeOf(red) = b: 'true'
                red = c: 'false'
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: b
                e0:
                  class: AComparison
                  code: red = c
                  str: 'false'
                e1:
                  class: Constructor
                  code: 'false'
                  str: 'false'
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
              - calling substitute
              - with_arguments:
                  self:
                    class: Constructor
                    code: red
                    str: red
                  e0:
                    class: AComparison
                    code: red = c
                    str: 'false'
                  e1:
                    class: Constructor
                    code: 'false'
                    str: 'false'
                  assignments:
                    codeOf(red): b
                    codeOf(blue): None
                    c: None
                    codeOf(red) = b: 'true'
                    red = c: 'false'
                    codeOf(red) = a: None
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
                  todo: '[]'
              - processing
              - output:
                  class: Constructor
                  code: red
                  str: red
              - returning from substitute
            - output:
                class: AppliedSymbol
                code: codeOf(red)
                str: b
            - returning from substitute
            - calling substitute
            - with_arguments:
                self:
                  class: Constructor
                  code: b
                  str: b
                e0:
                  class: AComparison
                  code: red = c
                  str: 'false'
                e1:
                  class: Constructor
                  code: 'false'
                  str: 'false'
                assignments:
                  codeOf(red): b
                  codeOf(blue): None
                  c: None
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: Constructor
                code: b
                str: b
            - returning from substitute
          - output:
              class: AComparison
              code: codeOf(red) = b
              str: 'true'
          - returning from substitute
        - output:
            class: AConjunction
            code: ~(red = c) ∧ codeOf(red) = b
            str: 'true'
        - returning from substitute
      - output:
          class: Brackets
          code: (~(red = c) ∧ codeOf(red) = b)
          str: (true)
      - returning from substitute
    - output:
        class: ADisjunction
        code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        str: 'true'
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: red
          str: red
        e0:
          class: AComparison
          code: red = c
          str: 'false'
        e1:
          class: Constructor
          code: 'false'
          str: 'false'
        assignments:
          codeOf(red): b
          codeOf(blue): None
          c: None
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: red
        str: red
    - returning from substitute
  - output:
      class: AppliedSymbol
      code: codeOf(red)
      str: b
      co_constraint:
        class: ADisjunction
        code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        str: 'true'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: Constructor
        code: b
        str: b
      e0:
        class: AComparison
        code: red = c
        str: 'false'
      e1:
        class: Constructor
        code: 'false'
        str: 'false'
      assignments:
        codeOf(red): b
        codeOf(blue): None
        c: None
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
  - output:
      class: Constructor
      code: b
      str: b
  - returning from substitute
- output:
    class: AComparison
    code: codeOf(red) = b
    str: 'true'
- returning from substitute
- '

  Z3 propagation ********************************'
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: codeOf(blue) = a ∨ codeOf(blue) = b
      str: codeOf(blue) = a ∨ codeOf(blue) = b
    e0:
      class: AppliedSymbol
      code: codeOf(blue)
      str: codeOf(blue)
    e1:
      class: Constructor
      code: a
      str: a
    assignments:
      codeOf(red): b
      codeOf(blue): a
      c: None
      codeOf(red) = b: 'true'
      red = c: 'false'
      codeOf(red) = a: None
      codeOf(blue) = a: None
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: codeOf(blue) = a
        str: codeOf(blue) = a
      e0:
        class: AppliedSymbol
        code: codeOf(blue)
        str: codeOf(blue)
      e1:
        class: Constructor
        code: a
        str: a
      assignments:
        codeOf(red): b
        codeOf(blue): a
        c: None
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: codeOf(blue)
          str: codeOf(blue)
        e0:
          class: AppliedSymbol
          code: codeOf(blue)
          str: codeOf(blue)
        e1:
          class: Constructor
          code: a
          str: a
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: None
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: AppliedSymbol
        code: codeOf(blue)
        str: a
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: a
          str: a
        e0:
          class: AppliedSymbol
          code: codeOf(blue)
          str: codeOf(blue)
        e1:
          class: Constructor
          code: a
          str: a
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: None
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: a
        str: a
    - returning from substitute
  - output:
      class: AComparison
      code: codeOf(blue) = a
      str: 'true'
  - returning from substitute
- output:
    class: ADisjunction
    code: codeOf(blue) = a ∨ codeOf(blue) = b
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: AComparison
      code: codeOf(red) = b
      str: 'true'
    e0:
      class: Variable
      code: c
      str: c
    e1:
      class: Constructor
      code: blue
      str: blue
    assignments:
      codeOf(red): b
      codeOf(blue): a
      c: blue
      codeOf(red) = b: 'true'
      red = c: 'false'
      codeOf(red) = a: None
      codeOf(blue) = a: None
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AppliedSymbol
        code: codeOf(red)
        str: b
        co_constraint:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: 'true'
      e0:
        class: Variable
        code: c
        str: c
      e1:
        class: Constructor
        code: blue
        str: blue
      assignments:
        codeOf(red): b
        codeOf(blue): a
        c: blue
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - 'definition:'
    - calling substitute
    - with_arguments:
        self:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: 'true'
        e0:
          class: Variable
          code: c
          str: c
        e1:
          class: Constructor
          code: blue
          str: blue
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: Brackets
            code: (red = c ∧ codeOf(red) = a)
            str: (false)
          e0:
            class: Variable
            code: c
            str: c
          e1:
            class: Constructor
            code: blue
            str: blue
          assignments:
            codeOf(red): b
            codeOf(blue): a
            c: blue
            codeOf(red) = b: 'true'
            red = c: 'false'
            codeOf(red) = a: None
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: AConjunction
              code: red = c ∧ codeOf(red) = a
              str: 'false'
            e0:
              class: Variable
              code: c
              str: c
            e1:
              class: Constructor
              code: blue
              str: blue
            assignments:
              codeOf(red): b
              codeOf(blue): a
              c: blue
              codeOf(red) = b: 'true'
              red = c: 'false'
              codeOf(red) = a: None
              codeOf(blue) = a: None
              codeOf(blue) = b: None
              c = red: None
              c = blue: None
            todo: '[]'
        - processing
          - calling substitute
          - with_arguments:
              self:
                class: AComparison
                code: codeOf(red) = a
                str: 'false'
              e0:
                class: Variable
                code: c
                str: c
              e1:
                class: Constructor
                code: blue
                str: blue
              assignments:
                codeOf(red): b
                codeOf(blue): a
                c: blue
                codeOf(red) = b: 'true'
                red = c: 'false'
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: b
                e0:
                  class: Variable
                  code: c
                  str: c
                e1:
                  class: Constructor
                  code: blue
                  str: blue
                assignments:
                  codeOf(red): b
                  codeOf(blue): a
                  c: blue
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
              - calling substitute
              - with_arguments:
                  self:
                    class: Constructor
                    code: red
                    str: red
                  e0:
                    class: Variable
                    code: c
                    str: c
                  e1:
                    class: Constructor
                    code: blue
                    str: blue
                  assignments:
                    codeOf(red): b
                    codeOf(blue): a
                    c: blue
                    codeOf(red) = b: 'true'
                    red = c: 'false'
                    codeOf(red) = a: None
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
                  todo: '[]'
              - processing
              - output:
                  class: Constructor
                  code: red
                  str: red
              - returning from substitute
            - output:
                class: AppliedSymbol
                code: codeOf(red)
                str: b
            - returning from substitute
            - calling substitute
            - with_arguments:
                self:
                  class: Constructor
                  code: a
                  str: a
                e0:
                  class: Variable
                  code: c
                  str: c
                e1:
                  class: Constructor
                  code: blue
                  str: blue
                assignments:
                  codeOf(red): b
                  codeOf(blue): a
                  c: blue
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: Constructor
                code: a
                str: a
            - returning from substitute
          - output:
              class: AComparison
              code: codeOf(red) = a
              str: 'false'
          - returning from substitute
        - output:
            class: AConjunction
            code: red = c ∧ codeOf(red) = a
            str: 'false'
        - returning from substitute
      - output:
          class: Brackets
          code: (red = c ∧ codeOf(red) = a)
          str: (false)
      - returning from substitute
      - calling substitute
      - with_arguments:
          self:
            class: Brackets
            code: (~(red = c) ∧ codeOf(red) = b)
            str: (true)
          e0:
            class: Variable
            code: c
            str: c
          e1:
            class: Constructor
            code: blue
            str: blue
          assignments:
            codeOf(red): b
            codeOf(blue): a
            c: blue
            codeOf(red) = b: 'true'
            red = c: 'false'
            codeOf(red) = a: None
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: AConjunction
              code: ~(red = c) ∧ codeOf(red) = b
              str: 'true'
            e0:
              class: Variable
              code: c
              str: c
            e1:
              class: Constructor
              code: blue
              str: blue
            assignments:
              codeOf(red): b
              codeOf(blue): a
              c: blue
              codeOf(red) = b: 'true'
              red = c: 'false'
              codeOf(red) = a: None
              codeOf(blue) = a: None
              codeOf(blue) = b: None
              c = red: None
              c = blue: None
            todo: '[]'
        - processing
          - calling substitute
          - with_arguments:
              self:
                class: AUnary
                code: ~(red = c)
                str: 'true'
              e0:
                class: Variable
                code: c
                str: c
              e1:
                class: Constructor
                code: blue
                str: blue
              assignments:
                codeOf(red): b
                codeOf(blue): a
                c: blue
                codeOf(red) = b: 'true'
                red = c: 'false'
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AComparison
                  code: red = c
                  str: 'false'
                e0:
                  class: Variable
                  code: c
                  str: c
                e1:
                  class: Constructor
                  code: blue
                  str: blue
                assignments:
                  codeOf(red): b
                  codeOf(blue): a
                  c: blue
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
              - calling substitute
              - with_arguments:
                  self:
                    class: Constructor
                    code: red
                    str: red
                  e0:
                    class: Variable
                    code: c
                    str: c
                  e1:
                    class: Constructor
                    code: blue
                    str: blue
                  assignments:
                    codeOf(red): b
                    codeOf(blue): a
                    c: blue
                    codeOf(red) = b: 'true'
                    red = c: 'false'
                    codeOf(red) = a: None
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
                  todo: '[]'
              - processing
              - output:
                  class: Constructor
                  code: red
                  str: red
              - returning from substitute
              - calling substitute
              - with_arguments:
                  self:
                    class: Variable
                    code: c
                    str: c
                  e0:
                    class: Variable
                    code: c
                    str: c
                  e1:
                    class: Constructor
                    code: blue
                    str: blue
                  assignments:
                    codeOf(red): b
                    codeOf(blue): a
                    c: blue
                    codeOf(red) = b: 'true'
                    red = c: 'false'
                    codeOf(red) = a: None
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
                  todo: '[]'
              - processing
              - output:
                  class: Variable
                  code: c
                  str: blue
              - returning from substitute
            - output:
                class: AComparison
                code: red = c
                str: 'false'
            - returning from substitute
          - output:
              class: AUnary
              code: ~(red = c)
              str: 'true'
          - returning from substitute
          - calling substitute
          - with_arguments:
              self:
                class: AComparison
                code: codeOf(red) = b
                str: 'true'
              e0:
                class: Variable
                code: c
                str: c
              e1:
                class: Constructor
                code: blue
                str: blue
              assignments:
                codeOf(red): b
                codeOf(blue): a
                c: blue
                codeOf(red) = b: 'true'
                red = c: 'false'
                codeOf(red) = a: None
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: b
                e0:
                  class: Variable
                  code: c
                  str: c
                e1:
                  class: Constructor
                  code: blue
                  str: blue
                assignments:
                  codeOf(red): b
                  codeOf(blue): a
                  c: blue
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
              - calling substitute
              - with_arguments:
                  self:
                    class: Constructor
                    code: red
                    str: red
                  e0:
                    class: Variable
                    code: c
                    str: c
                  e1:
                    class: Constructor
                    code: blue
                    str: blue
                  assignments:
                    codeOf(red): b
                    codeOf(blue): a
                    c: blue
                    codeOf(red) = b: 'true'
                    red = c: 'false'
                    codeOf(red) = a: None
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
                  todo: '[]'
              - processing
              - output:
                  class: Constructor
                  code: red
                  str: red
              - returning from substitute
            - output:
                class: AppliedSymbol
                code: codeOf(red)
                str: b
            - returning from substitute
            - calling substitute
            - with_arguments:
                self:
                  class: Constructor
                  code: b
                  str: b
                e0:
                  class: Variable
                  code: c
                  str: c
                e1:
                  class: Constructor
                  code: blue
                  str: blue
                assignments:
                  codeOf(red): b
                  codeOf(blue): a
                  c: blue
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: None
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: Constructor
                code: b
                str: b
            - returning from substitute
          - output:
              class: AComparison
              code: codeOf(red) = b
              str: 'true'
          - returning from substitute
        - output:
            class: AConjunction
            code: ~(red = c) ∧ codeOf(red) = b
            str: 'true'
        - returning from substitute
      - output:
          class: Brackets
          code: (~(red = c) ∧ codeOf(red) = b)
          str: (true)
      - returning from substitute
    - output:
        class: ADisjunction
        code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        str: 'true'
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: red
          str: red
        e0:
          class: Variable
          code: c
          str: c
        e1:
          class: Constructor
          code: blue
          str: blue
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: red
        str: red
    - returning from substitute
  - output:
      class: AppliedSymbol
      code: codeOf(red)
      str: b
      co_constraint:
        class: ADisjunction
        code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        str: 'true'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: Constructor
        code: b
        str: b
      e0:
        class: Variable
        code: c
        str: c
      e1:
        class: Constructor
        code: blue
        str: blue
      assignments:
        codeOf(red): b
        codeOf(blue): a
        c: blue
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
  - output:
      class: Constructor
      code: b
      str: b
  - returning from substitute
- output:
    class: AComparison
    code: codeOf(red) = b
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: c = red ∨ c = blue
      str: c = red ∨ c = blue
    e0:
      class: Variable
      code: c
      str: c
    e1:
      class: Constructor
      code: blue
      str: blue
    assignments:
      codeOf(red): b
      codeOf(blue): a
      c: blue
      codeOf(red) = b: 'true'
      red = c: 'false'
      codeOf(red) = a: None
      codeOf(blue) = a: None
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: c = red
        str: c = red
      e0:
        class: Variable
        code: c
        str: c
      e1:
        class: Constructor
        code: blue
        str: blue
      assignments:
        codeOf(red): b
        codeOf(blue): a
        c: blue
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: Variable
          code: c
          str: c
        e0:
          class: Variable
          code: c
          str: c
        e1:
          class: Constructor
          code: blue
          str: blue
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Variable
        code: c
        str: blue
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: red
          str: red
        e0:
          class: Variable
          code: c
          str: c
        e1:
          class: Constructor
          code: blue
          str: blue
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: red
        str: red
    - returning from substitute
  - output:
      class: AComparison
      code: c = red
      str: 'false'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: c = blue
        str: c = blue
      e0:
        class: Variable
        code: c
        str: c
      e1:
        class: Constructor
        code: blue
        str: blue
      assignments:
        codeOf(red): b
        codeOf(blue): a
        c: blue
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: None
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: Variable
          code: c
          str: c
        e0:
          class: Variable
          code: c
          str: c
        e1:
          class: Constructor
          code: blue
          str: blue
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Variable
        code: c
        str: blue
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: blue
          str: blue
        e0:
          class: Variable
          code: c
          str: c
        e1:
          class: Constructor
          code: blue
          str: blue
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: None
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: blue
        str: blue
    - returning from substitute
  - output:
      class: AComparison
      code: c = blue
      str: 'true'
  - returning from substitute
- output:
    class: ADisjunction
    code: c = red ∨ c = blue
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: AComparison
      code: codeOf(red) = b
      str: 'true'
    e0:
      class: AComparison
      code: codeOf(red) = a
      str: codeOf(red) = a
    e1:
      class: Constructor
      code: 'false'
      str: 'false'
    assignments:
      codeOf(red): b
      codeOf(blue): a
      c: blue
      codeOf(red) = b: 'true'
      red = c: 'false'
      codeOf(red) = a: 'false'
      codeOf(blue) = a: None
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AppliedSymbol
        code: codeOf(red)
        str: b
        co_constraint:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: 'true'
      e0:
        class: AComparison
        code: codeOf(red) = a
        str: codeOf(red) = a
      e1:
        class: Constructor
        code: 'false'
        str: 'false'
      assignments:
        codeOf(red): b
        codeOf(blue): a
        c: blue
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: 'false'
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - 'definition:'
    - calling substitute
    - with_arguments:
        self:
          class: ADisjunction
          code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
          str: 'true'
        e0:
          class: AComparison
          code: codeOf(red) = a
          str: codeOf(red) = a
        e1:
          class: Constructor
          code: 'false'
          str: 'false'
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: 'false'
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: Brackets
            code: (red = c ∧ codeOf(red) = a)
            str: (false)
          e0:
            class: AComparison
            code: codeOf(red) = a
            str: codeOf(red) = a
          e1:
            class: Constructor
            code: 'false'
            str: 'false'
          assignments:
            codeOf(red): b
            codeOf(blue): a
            c: blue
            codeOf(red) = b: 'true'
            red = c: 'false'
            codeOf(red) = a: 'false'
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: AConjunction
              code: red = c ∧ codeOf(red) = a
              str: 'false'
            e0:
              class: AComparison
              code: codeOf(red) = a
              str: codeOf(red) = a
            e1:
              class: Constructor
              code: 'false'
              str: 'false'
            assignments:
              codeOf(red): b
              codeOf(blue): a
              c: blue
              codeOf(red) = b: 'true'
              red = c: 'false'
              codeOf(red) = a: 'false'
              codeOf(blue) = a: None
              codeOf(blue) = b: None
              c = red: None
              c = blue: None
            todo: '[]'
        - processing
          - calling substitute
          - with_arguments:
              self:
                class: AComparison
                code: codeOf(red) = a
                str: 'false'
              e0:
                class: AComparison
                code: codeOf(red) = a
                str: codeOf(red) = a
              e1:
                class: Constructor
                code: 'false'
                str: 'false'
              assignments:
                codeOf(red): b
                codeOf(blue): a
                c: blue
                codeOf(red) = b: 'true'
                red = c: 'false'
                codeOf(red) = a: 'false'
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
          - output:
              class: AComparison
              code: codeOf(red) = a
              str: 'false'
          - returning from substitute
        - output:
            class: AConjunction
            code: red = c ∧ codeOf(red) = a
            str: 'false'
        - returning from substitute
      - output:
          class: Brackets
          code: (red = c ∧ codeOf(red) = a)
          str: (false)
      - returning from substitute
      - calling substitute
      - with_arguments:
          self:
            class: Brackets
            code: (~(red = c) ∧ codeOf(red) = b)
            str: (true)
          e0:
            class: AComparison
            code: codeOf(red) = a
            str: codeOf(red) = a
          e1:
            class: Constructor
            code: 'false'
            str: 'false'
          assignments:
            codeOf(red): b
            codeOf(blue): a
            c: blue
            codeOf(red) = b: 'true'
            red = c: 'false'
            codeOf(red) = a: 'false'
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: AConjunction
              code: ~(red = c) ∧ codeOf(red) = b
              str: 'true'
            e0:
              class: AComparison
              code: codeOf(red) = a
              str: codeOf(red) = a
            e1:
              class: Constructor
              code: 'false'
              str: 'false'
            assignments:
              codeOf(red): b
              codeOf(blue): a
              c: blue
              codeOf(red) = b: 'true'
              red = c: 'false'
              codeOf(red) = a: 'false'
              codeOf(blue) = a: None
              codeOf(blue) = b: None
              c = red: None
              c = blue: None
            todo: '[]'
        - processing
          - calling substitute
          - with_arguments:
              self:
                class: AUnary
                code: ~(red = c)
                str: 'true'
              e0:
                class: AComparison
                code: codeOf(red) = a
                str: codeOf(red) = a
              e1:
                class: Constructor
                code: 'false'
                str: 'false'
              assignments:
                codeOf(red): b
                codeOf(blue): a
                c: blue
                codeOf(red) = b: 'true'
                red = c: 'false'
                codeOf(red) = a: 'false'
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AComparison
                  code: red = c
                  str: 'false'
                e0:
                  class: AComparison
                  code: codeOf(red) = a
                  str: codeOf(red) = a
                e1:
                  class: Constructor
                  code: 'false'
                  str: 'false'
                assignments:
                  codeOf(red): b
                  codeOf(blue): a
                  c: blue
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: 'false'
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
              - calling substitute
              - with_arguments:
                  self:
                    class: Constructor
                    code: red
                    str: red
                  e0:
                    class: AComparison
                    code: codeOf(red) = a
                    str: codeOf(red) = a
                  e1:
                    class: Constructor
                    code: 'false'
                    str: 'false'
                  assignments:
                    codeOf(red): b
                    codeOf(blue): a
                    c: blue
                    codeOf(red) = b: 'true'
                    red = c: 'false'
                    codeOf(red) = a: 'false'
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
                  todo: '[]'
              - processing
              - output:
                  class: Constructor
                  code: red
                  str: red
              - returning from substitute
              - calling substitute
              - with_arguments:
                  self:
                    class: Variable
                    code: c
                    str: blue
                  e0:
                    class: AComparison
                    code: codeOf(red) = a
                    str: codeOf(red) = a
                  e1:
                    class: Constructor
                    code: 'false'
                    str: 'false'
                  assignments:
                    codeOf(red): b
                    codeOf(blue): a
                    c: blue
                    codeOf(red) = b: 'true'
                    red = c: 'false'
                    codeOf(red) = a: 'false'
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
                  todo: '[]'
              - processing
              - output:
                  class: Variable
                  code: c
                  str: blue
              - returning from substitute
            - output:
                class: AComparison
                code: red = c
                str: 'false'
            - returning from substitute
          - output:
              class: AUnary
              code: ~(red = c)
              str: 'true'
          - returning from substitute
          - calling substitute
          - with_arguments:
              self:
                class: AComparison
                code: codeOf(red) = b
                str: 'true'
              e0:
                class: AComparison
                code: codeOf(red) = a
                str: codeOf(red) = a
              e1:
                class: Constructor
                code: 'false'
                str: 'false'
              assignments:
                codeOf(red): b
                codeOf(blue): a
                c: blue
                codeOf(red) = b: 'true'
                red = c: 'false'
                codeOf(red) = a: 'false'
                codeOf(blue) = a: None
                codeOf(blue) = b: None
                c = red: None
                c = blue: None
              todo: '[]'
          - processing
            - calling substitute
            - with_arguments:
                self:
                  class: AppliedSymbol
                  code: codeOf(red)
                  str: b
                e0:
                  class: AComparison
                  code: codeOf(red) = a
                  str: codeOf(red) = a
                e1:
                  class: Constructor
                  code: 'false'
                  str: 'false'
                assignments:
                  codeOf(red): b
                  codeOf(blue): a
                  c: blue
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: 'false'
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
              - calling substitute
              - with_arguments:
                  self:
                    class: Constructor
                    code: red
                    str: red
                  e0:
                    class: AComparison
                    code: codeOf(red) = a
                    str: codeOf(red) = a
                  e1:
                    class: Constructor
                    code: 'false'
                    str: 'false'
                  assignments:
                    codeOf(red): b
                    codeOf(blue): a
                    c: blue
                    codeOf(red) = b: 'true'
                    red = c: 'false'
                    codeOf(red) = a: 'false'
                    codeOf(blue) = a: None
                    codeOf(blue) = b: None
                    c = red: None
                    c = blue: None
                  todo: '[]'
              - processing
              - output:
                  class: Constructor
                  code: red
                  str: red
              - returning from substitute
            - output:
                class: AppliedSymbol
                code: codeOf(red)
                str: b
            - returning from substitute
            - calling substitute
            - with_arguments:
                self:
                  class: Constructor
                  code: b
                  str: b
                e0:
                  class: AComparison
                  code: codeOf(red) = a
                  str: codeOf(red) = a
                e1:
                  class: Constructor
                  code: 'false'
                  str: 'false'
                assignments:
                  codeOf(red): b
                  codeOf(blue): a
                  c: blue
                  codeOf(red) = b: 'true'
                  red = c: 'false'
                  codeOf(red) = a: 'false'
                  codeOf(blue) = a: None
                  codeOf(blue) = b: None
                  c = red: None
                  c = blue: None
                todo: '[]'
            - processing
            - output:
                class: Constructor
                code: b
                str: b
            - returning from substitute
          - output:
              class: AComparison
              code: codeOf(red) = b
              str: 'true'
          - returning from substitute
        - output:
            class: AConjunction
            code: ~(red = c) ∧ codeOf(red) = b
            str: 'true'
        - returning from substitute
      - output:
          class: Brackets
          code: (~(red = c) ∧ codeOf(red) = b)
          str: (true)
      - returning from substitute
    - output:
        class: ADisjunction
        code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        str: 'true'
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: red
          str: red
        e0:
          class: AComparison
          code: codeOf(red) = a
          str: codeOf(red) = a
        e1:
          class: Constructor
          code: 'false'
          str: 'false'
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: 'false'
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: red
        str: red
    - returning from substitute
  - output:
      class: AppliedSymbol
      code: codeOf(red)
      str: b
      co_constraint:
        class: ADisjunction
        code: (red = c ∧ codeOf(red) = a) ∨ (~(red = c) ∧ codeOf(red) = b)
        str: 'true'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: Constructor
        code: b
        str: b
      e0:
        class: AComparison
        code: codeOf(red) = a
        str: codeOf(red) = a
      e1:
        class: Constructor
        code: 'false'
        str: 'false'
      assignments:
        codeOf(red): b
        codeOf(blue): a
        c: blue
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: 'false'
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
  - output:
      class: Constructor
      code: b
      str: b
  - returning from substitute
- output:
    class: AComparison
    code: codeOf(red) = b
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: codeOf(red) = a ∨ codeOf(red) = b
      str: 'true'
    e0:
      class: AComparison
      code: codeOf(red) = a
      str: codeOf(red) = a
    e1:
      class: Constructor
      code: 'false'
      str: 'false'
    assignments:
      codeOf(red): b
      codeOf(blue): a
      c: blue
      codeOf(red) = b: 'true'
      red = c: 'false'
      codeOf(red) = a: 'false'
      codeOf(blue) = a: None
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: codeOf(red) = a
        str: 'false'
      e0:
        class: AComparison
        code: codeOf(red) = a
        str: codeOf(red) = a
      e1:
        class: Constructor
        code: 'false'
        str: 'false'
      assignments:
        codeOf(red): b
        codeOf(blue): a
        c: blue
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: 'false'
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
  - output:
      class: AComparison
      code: codeOf(red) = a
      str: 'false'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: codeOf(red) = b
        str: 'true'
      e0:
        class: AComparison
        code: codeOf(red) = a
        str: codeOf(red) = a
      e1:
        class: Constructor
        code: 'false'
        str: 'false'
      assignments:
        codeOf(red): b
        codeOf(blue): a
        c: blue
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: 'false'
        codeOf(blue) = a: None
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: codeOf(red)
          str: b
        e0:
          class: AComparison
          code: codeOf(red) = a
          str: codeOf(red) = a
        e1:
          class: Constructor
          code: 'false'
          str: 'false'
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: 'false'
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: Constructor
            code: red
            str: red
          e0:
            class: AComparison
            code: codeOf(red) = a
            str: codeOf(red) = a
          e1:
            class: Constructor
            code: 'false'
            str: 'false'
          assignments:
            codeOf(red): b
            codeOf(blue): a
            c: blue
            codeOf(red) = b: 'true'
            red = c: 'false'
            codeOf(red) = a: 'false'
            codeOf(blue) = a: None
            codeOf(blue) = b: None
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
      - output:
          class: Constructor
          code: red
          str: red
      - returning from substitute
    - output:
        class: AppliedSymbol
        code: codeOf(red)
        str: b
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: b
          str: b
        e0:
          class: AComparison
          code: codeOf(red) = a
          str: codeOf(red) = a
        e1:
          class: Constructor
          code: 'false'
          str: 'false'
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: 'false'
          codeOf(blue) = a: None
          codeOf(blue) = b: None
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: b
        str: b
    - returning from substitute
  - output:
      class: AComparison
      code: codeOf(red) = b
      str: 'true'
  - returning from substitute
- output:
    class: ADisjunction
    code: codeOf(red) = a ∨ codeOf(red) = b
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: codeOf(blue) = a ∨ codeOf(blue) = b
      str: 'true'
    e0:
      class: AComparison
      code: codeOf(blue) = a
      str: codeOf(blue) = a
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      codeOf(red): b
      codeOf(blue): a
      c: blue
      codeOf(red) = b: 'true'
      red = c: 'false'
      codeOf(red) = a: 'false'
      codeOf(blue) = a: 'true'
      codeOf(blue) = b: None
      c = red: None
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: codeOf(blue) = a
        str: 'true'
      e0:
        class: AComparison
        code: codeOf(blue) = a
        str: codeOf(blue) = a
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        codeOf(red): b
        codeOf(blue): a
        c: blue
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: 'false'
        codeOf(blue) = a: 'true'
        codeOf(blue) = b: None
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
  - output:
      class: AComparison
      code: codeOf(blue) = a
      str: 'true'
  - returning from substitute
- output:
    class: ADisjunction
    code: codeOf(blue) = a ∨ codeOf(blue) = b
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: codeOf(blue) = a ∨ codeOf(blue) = b
      str: 'true'
    e0:
      class: AComparison
      code: codeOf(blue) = b
      str: codeOf(blue) = b
    e1:
      class: Constructor
      code: 'false'
      str: 'false'
    assignments:
      codeOf(red): b
      codeOf(blue): a
      c: blue
      codeOf(red) = b: 'true'
      red = c: 'false'
      codeOf(red) = a: 'false'
      codeOf(blue) = a: 'true'
      codeOf(blue) = b: 'false'
      c = red: None
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: codeOf(blue) = a
        str: 'true'
      e0:
        class: AComparison
        code: codeOf(blue) = b
        str: codeOf(blue) = b
      e1:
        class: Constructor
        code: 'false'
        str: 'false'
      assignments:
        codeOf(red): b
        codeOf(blue): a
        c: blue
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: 'false'
        codeOf(blue) = a: 'true'
        codeOf(blue) = b: 'false'
        c = red: None
        c = blue: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: codeOf(blue)
          str: a
        e0:
          class: AComparison
          code: codeOf(blue) = b
          str: codeOf(blue) = b
        e1:
          class: Constructor
          code: 'false'
          str: 'false'
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: 'false'
          codeOf(blue) = a: 'true'
          codeOf(blue) = b: 'false'
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: Constructor
            code: blue
            str: blue
          e0:
            class: AComparison
            code: codeOf(blue) = b
            str: codeOf(blue) = b
          e1:
            class: Constructor
            code: 'false'
            str: 'false'
          assignments:
            codeOf(red): b
            codeOf(blue): a
            c: blue
            codeOf(red) = b: 'true'
            red = c: 'false'
            codeOf(red) = a: 'false'
            codeOf(blue) = a: 'true'
            codeOf(blue) = b: 'false'
            c = red: None
            c = blue: None
          todo: '[]'
      - processing
      - output:
          class: Constructor
          code: blue
          str: blue
      - returning from substitute
    - output:
        class: AppliedSymbol
        code: codeOf(blue)
        str: a
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: a
          str: a
        e0:
          class: AComparison
          code: codeOf(blue) = b
          str: codeOf(blue) = b
        e1:
          class: Constructor
          code: 'false'
          str: 'false'
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: 'false'
          codeOf(blue) = a: 'true'
          codeOf(blue) = b: 'false'
          c = red: None
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: a
        str: a
    - returning from substitute
  - output:
      class: AComparison
      code: codeOf(blue) = a
      str: 'true'
  - returning from substitute
- output:
    class: ADisjunction
    code: codeOf(blue) = a ∨ codeOf(blue) = b
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: c = red ∨ c = blue
      str: 'true'
    e0:
      class: AComparison
      code: c = red
      str: c = red
    e1:
      class: Constructor
      code: 'false'
      str: 'false'
    assignments:
      codeOf(red): b
      codeOf(blue): a
      c: blue
      codeOf(red) = b: 'true'
      red = c: 'false'
      codeOf(red) = a: 'false'
      codeOf(blue) = a: 'true'
      codeOf(blue) = b: 'false'
      c = red: 'false'
      c = blue: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: c = red
        str: 'false'
      e0:
        class: AComparison
        code: c = red
        str: c = red
      e1:
        class: Constructor
        code: 'false'
        str: 'false'
      assignments:
        codeOf(red): b
        codeOf(blue): a
        c: blue
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: 'false'
        codeOf(blue) = a: 'true'
        codeOf(blue) = b: 'false'
        c = red: 'false'
        c = blue: None
      todo: '[]'
  - processing
  - output:
      class: AComparison
      code: c = red
      str: 'false'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: c = blue
        str: 'true'
      e0:
        class: AComparison
        code: c = red
        str: c = red
      e1:
        class: Constructor
        code: 'false'
        str: 'false'
      assignments:
        codeOf(red): b
        codeOf(blue): a
        c: blue
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: 'false'
        codeOf(blue) = a: 'true'
        codeOf(blue) = b: 'false'
        c = red: 'false'
        c = blue: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: Variable
          code: c
          str: blue
        e0:
          class: AComparison
          code: c = red
          str: c = red
        e1:
          class: Constructor
          code: 'false'
          str: 'false'
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: 'false'
          codeOf(blue) = a: 'true'
          codeOf(blue) = b: 'false'
          c = red: 'false'
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Variable
        code: c
        str: blue
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: blue
          str: blue
        e0:
          class: AComparison
          code: c = red
          str: c = red
        e1:
          class: Constructor
          code: 'false'
          str: 'false'
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: 'false'
          codeOf(blue) = a: 'true'
          codeOf(blue) = b: 'false'
          c = red: 'false'
          c = blue: None
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: blue
        str: blue
    - returning from substitute
  - output:
      class: AComparison
      code: c = blue
      str: 'true'
  - returning from substitute
- output:
    class: ADisjunction
    code: c = red ∨ c = blue
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: c = red ∨ c = blue
      str: 'true'
    e0:
      class: AComparison
      code: c = blue
      str: c = blue
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      codeOf(red): b
      codeOf(blue): a
      c: blue
      codeOf(red) = b: 'true'
      red = c: 'false'
      codeOf(red) = a: 'false'
      codeOf(blue) = a: 'true'
      codeOf(blue) = b: 'false'
      c = red: 'false'
      c = blue: 'true'
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: c = red
        str: 'false'
      e0:
        class: AComparison
        code: c = blue
        str: c = blue
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        codeOf(red): b
        codeOf(blue): a
        c: blue
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: 'false'
        codeOf(blue) = a: 'true'
        codeOf(blue) = b: 'false'
        c = red: 'false'
        c = blue: 'true'
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: Variable
          code: c
          str: blue
        e0:
          class: AComparison
          code: c = blue
          str: c = blue
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: 'false'
          codeOf(blue) = a: 'true'
          codeOf(blue) = b: 'false'
          c = red: 'false'
          c = blue: 'true'
        todo: '[]'
    - processing
    - output:
        class: Variable
        code: c
        str: blue
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: Constructor
          code: red
          str: red
        e0:
          class: AComparison
          code: c = blue
          str: c = blue
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          codeOf(red): b
          codeOf(blue): a
          c: blue
          codeOf(red) = b: 'true'
          red = c: 'false'
          codeOf(red) = a: 'false'
          codeOf(blue) = a: 'true'
          codeOf(blue) = b: 'false'
          c = red: 'false'
          c = blue: 'true'
        todo: '[]'
    - processing
    - output:
        class: Constructor
        code: red
        str: red
    - returning from substitute
  - output:
      class: AComparison
      code: c = red
      str: 'false'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: AComparison
        code: c = blue
        str: 'true'
      e0:
        class: AComparison
        code: c = blue
        str: c = blue
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        codeOf(red): b
        codeOf(blue): a
        c: blue
        codeOf(red) = b: 'true'
        red = c: 'false'
        codeOf(red) = a: 'false'
        codeOf(blue) = a: 'true'
        codeOf(blue) = b: 'false'
        c = red: 'false'
        c = blue: 'true'
      todo: '[]'
  - processing
  - output:
      class: AComparison
      code: c = blue
      str: 'true'
  - returning from substitute
- output:
    class: ADisjunction
    code: c = red ∨ c = blue
    str: 'true'
- returning from substitute