vocabulary {
	type node := {a,b,c}
	edge: (node ⨯ node) → Bool
	symmetric: (Concept[node*node -> Bool]) → Bool
    Start: ()→node
	var x in node
}
theory {
    edge(a,b).
    !`p in Concept[node*node -> Bool]: !x: !y in node: $(`p)(x,y) => $(`p)(y,x).
    !`p in Concept[node*node -> Bool]: symmetric(`p)
				=> (!x: !y in node: $(`p)(x,y) => $(`p)(y,x)).
    !`p in symmetric: !x: !y in node: $(`p)(x,y) => $(`p)(y,x).
	symmetric := {`edge}.
}
display {
	expand := {`edge}.
}