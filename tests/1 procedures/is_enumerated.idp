vocabulary V {
    type color constructed from {red, blue, green}
    Color: color
    opposite(color): color
    is_color(color)
    
    type AB constructed from {A, B}
    f(AB,AB):AB
}

structure S:V {
    opposite = {red, green; green, green}
    f = {A,A, A; A,B, A; B,A, B}
}

structure S2:V {
    opposite = {red, green; green, red} else blue
    f = {A,A, A; A,B, A; B,A, B} else B
}

theory T:V {
    opposite(red) is enumerated.
    opposite(blue) is not enumerated => opposite(blue)=blue.
    opposite(Color) is not enumerated.
}
theory T2:V {
    opposite(blue)=green.
    opposite(Color)=Color.
    f(A,B) is enumerated.
}
theory T3:V {
    is_color(red) is enumerated.
}
theory T4:V {
    Color = blue.
    (f(B,B) is enumerated).
}

procedure main() {
    print("T, S")
    print(model_expand(T, S))
    print("propagate")
    print(str(Problem(T,S).propagate().simplify().formula().translate()))
    print("T, S2")
    print(model_expand(T, S2))
    print("T2, S")
    print(model_expand(T2, S))
    print("T4, S2")
    print(model_expand(T4, S2))
    print("T3, S")
    print(model_expand(T3, S))
}