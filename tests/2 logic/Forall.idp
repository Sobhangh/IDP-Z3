vocabulary V {
    type Color := {red, blue, green}
    p: () → Bool
    q:(Color) → Bool
    color: ()→ Color
    r:(Color) → Bool
    compatible: Color * Color -> Bool
}
theory T1:V {
    p() <=> (∀c in Color: c=red).
    q := {red, blue}
    (∀c in Color: ~q(c) => c=color()).
    ∀c in Color: Color(c).
    ∀c in $(`Color): Color(c).
    ∀c in q: Color(c).
    ∀c in r, c2 in q: Color(c).
}
theory T2:V {
    q := {red, blue}
    ∀c in q: Color(c).
    ∀c in r, c2 in q: Color(c).
}
theory T3:V {
    q := {red, blue}
    (∀c in Color: ~q(c) => c=color()).
    ∀c in $(`Color): Color(c).
}
theory T4:V {
    ∀c1, c2 in q: Color(c1) & Color(c2).
    ∀c in q: Color(c).
}
theory T5:V {
    ! (x,y) in compatible: r(x) => r(y).
}
procedure main() {
    pretty_print(str(Problem(T1).formula()))
    pretty_print(str(Problem(T2).formula()))
    pretty_print(str(Problem(T3).formula()))
    pretty_print(str(Problem(T4).formula()))
    pretty_print(str(Problem(T5).formula()))
}