vocabulary V {
  //type Person is {John,Bob} //Marry
  type Person is {1,3,2}
  type Book is {B1}
  <Temporal> Owns : (Person * Book) -> Bool
  <Cause> Ct_Owns : (Person * Book) -> Bool
  <Cause> Cf_Owns : (Person * Book) -> Bool
  <Action> Gives: (Person * Book * Person) -> Bool
  <Temporal> Bob_Owns : Book -> Bool
  <Temporal> John_Owns : () -> Bool
}

theory LTC T:V {

    {
        //Start[Owns(Bob,B1)].
        Start[Owns(1,B1)].
        ! p in Person, b in Book: Next[Owns(p,b)] <- Now[Ct_Owns(p,b)].
        ! p in Person, b in Book: Next[Owns(p,b)] <- Now[Owns(p,b)] and not Now[Cf_Owns(p,b)].
        ! g in Person, r in Person, b in Book: Now[Ct_Owns(r,b)] <- Now[Gives(g,b,r)].
        ! g in Person, r in Person, b in Book: Now[Cf_Owns(g,b)] <- Now[Gives(g,b,r)] . //and  not (g=r)
        ! b in Book: Now[Bob_Owns(b)] <- Now[Owns(1,b)].
        Now[John_Owns()] <- ? b in Book: Now[Owns(2,b)].
    }
    ! g in Person, r in Person, b in Book: Now[Gives(g,b,r)] => Now[Owns(g,b)].
    #{ g in Person, b in Book, r in Person : Now[Gives(g,b,r)] } =< 1.
    
}

temporal_logic ltl:V {
    //TEST FOR RIMPLICATION
    //((F Owns(1,B1) ) and (G (Owns(2,B1) and (F Bob_Owns(B1) <= Owns(1,B1) ) ) ))

    //TEST FOR CORRECT DELINIATION OF {PRED}
    //(G (Owns(1,B1) or (F Owns(1,B1))))

    //TEST FOR QUANTIFICATION
    //(G !b in Book: ? p in Person: Owns(p,b))

    //quantification wiht more quantees
    //(G ?b in Book,p in Person: Owns(p,b))

    //true and nullary predicate: From : https://prob.hhu.de/w/index.php?title=HandBook/B_Language#Sets:
    //Warning: TRUE and FALSE are values and not predicates in B and cannot be combined using logical connectives. \
    //To combine two boolean values x and y using conjunction you have to write x=TRUE & y=TRUE. To convert a predicate
    // such as z>0 into a boolean value you have to use bool(z>0). 
    //(F true => John_Owns())


}

structure S:V {
    // Check if the partial assignment of structure works with temporal predicate
}

procedure main () {
    ProveModalLogic(ltl,S,T)
    //simulate(T,S)
}
