
- calling substitute
- with_arguments:
    self:
      class: Variable
      code: p
      str: p
    e0:
      class: Constructor
      code: 'true'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    todo: '[]'
- processing
- output:
    class: Variable
    code: p
    str: p
- returning from substitute
- calling Expression_substitute
- with_arguments:
    self:
      class: Brackets
      code: (~((p)) ∨ (p))
      str: (~((p)) ∨ (p))
    e0:
      class: Constructor
      code: 'true'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    todo: '[]'
- processing
  - calling Expression_substitute
  - with_arguments:
      self:
        class: ADisjunction
        code: ~((p)) ∨ (p)
        str: ~((p)) ∨ (p)
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      todo: '[]'
  - processing
    - calling Expression_substitute
    - with_arguments:
        self:
          class: AUnary
          code: ~((p))
          str: ~((p))
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        todo: '[]'
    - processing
      - calling Expression_substitute
      - with_arguments:
          self:
            class: Brackets
            code: (p)
            str: (p)
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: Variable
              code: p
              str: p
            e0:
              class: Constructor
              code: 'true'
              str: 'true'
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            todo: '[]'
        - processing
        - output:
            class: Variable
            code: p
            str: p
        - returning from substitute
      - output:
          class: Brackets
          code: (p)
          str: (p)
      - returning from Expression_substitute
    - output:
        class: AUnary
        code: ~((p))
        str: ~((p))
    - returning from Expression_substitute
    - calling Expression_substitute
    - with_arguments:
        self:
          class: Brackets
          code: (p)
          str: (p)
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: Variable
            code: p
            str: p
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          todo: '[]'
      - processing
      - output:
          class: Variable
          code: p
          str: p
      - returning from substitute
    - output:
        class: Brackets
        code: (p)
        str: (p)
    - returning from Expression_substitute
  - output:
      class: ADisjunction
      code: ~((p)) ∨ (p)
      str: ~((p)) ∨ (p)
  - returning from Expression_substitute
- output:
    class: Brackets
    code: (~((p)) ∨ (p))
    str: (~((p)) ∨ (p))
- returning from Expression_substitute
- calling substitute
- with_arguments:
    self:
      class: Variable
      code: p
      str: p
    e0:
      class: Variable
      code: p
      str: p
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    todo: '[]'
- processing
- output:
    class: Variable
    code: p
    str: 'true'
- returning from substitute
- calling Expression_substitute
- with_arguments:
    self:
      class: Brackets
      code: (~((p)) ∨ (p))
      str: (~((p)) ∨ (p))
    e0:
      class: Variable
      code: p
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    todo: '[]'
- processing
  - calling Expression_substitute
  - with_arguments:
      self:
        class: ADisjunction
        code: ~((p)) ∨ (p)
        str: ~((p)) ∨ (p)
      e0:
        class: Variable
        code: p
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      todo: '[]'
  - processing
    - calling Expression_substitute
    - with_arguments:
        self:
          class: AUnary
          code: ~((p))
          str: ~((p))
        e0:
          class: Variable
          code: p
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        todo: '[]'
    - processing
      - calling Expression_substitute
      - with_arguments:
          self:
            class: Brackets
            code: (p)
            str: (p)
          e0:
            class: Variable
            code: p
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: Variable
              code: p
              str: p
            e0:
              class: Variable
              code: p
              str: 'true'
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            todo: '[]'
        - processing
        - output:
            class: Variable
            code: p
            str: 'true'
        - returning from substitute
      - output:
          class: Brackets
          code: (p)
          str: (true)
      - returning from Expression_substitute
    - output:
        class: AUnary
        code: ~((p))
        str: 'false'
    - returning from Expression_substitute
    - calling Expression_substitute
    - with_arguments:
        self:
          class: Brackets
          code: (p)
          str: (p)
        e0:
          class: Variable
          code: p
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: Variable
            code: p
            str: p
          e0:
            class: Variable
            code: p
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          todo: '[]'
      - processing
      - output:
          class: Variable
          code: p
          str: 'true'
      - returning from substitute
    - output:
        class: Brackets
        code: (p)
        str: (true)
    - returning from Expression_substitute
  - output:
      class: ADisjunction
      code: ~((p)) ∨ (p)
      str: 'true'
  - returning from Expression_substitute
- output:
    class: Brackets
    code: (~((p)) ∨ (p))
    str: (true)
- returning from Expression_substitute
- calling substitute
- with_arguments:
    self:
      class: Variable
      code: p
      str: 'true'
    e0:
      class: Variable
      code: p
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
- output:
    class: Variable
    code: p
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: Variable
      code: q
      str: q
    e0:
      class: Variable
      code: p
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
- output:
    class: Variable
    code: q
    str: q
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: Variable
      code: r
      str: r
    e0:
      class: Variable
      code: p
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
- output:
    class: Variable
    code: r
    str: r
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: Variable
      code: s
      str: s
    e0:
      class: Variable
      code: p
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
- output:
    class: Variable
    code: s
    str: s
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: Variable
      code: t
      str: t
    e0:
      class: Variable
      code: p
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
- output:
    class: Variable
    code: t
    str: t
- returning from substitute
- '

  Z3 propagation ********************************'