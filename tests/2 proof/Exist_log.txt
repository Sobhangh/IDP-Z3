
- calling Expression_substitute
- with_arguments:
    self:
      class: AEquivalence
      code: 'p ⇔ (∃c[color] : c ≠ red)'
      str: p
    e0:
      class: Constructor
      code: 'true'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: Variable
        code: p
        str: p
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      todo: '[]'
  - processing
  - output:
      class: Variable
      code: p
      str: p
  - returning from substitute
  - calling Expression_substitute
  - with_arguments:
      self:
        class: Brackets
        code: '(∃c[color] : c ≠ red)'
        str: (true)
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      todo: '[]'
  - processing
    - calling Expression_substitute
    - with_arguments:
        self:
          class: AQuantification
          code: '∃c[color] : c ≠ red'
          str: 'true'
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        todo: '[]'
    - processing
      - calling Expression_substitute
      - with_arguments:
          self:
            class: ADisjunction
            code: false ∨ true ∨ true
            str: 'true'
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          todo: '[]'
      - processing
        - calling Expression_substitute
        - with_arguments:
            self:
              class: Constructor
              code: 'true'
              str: 'true'
            e0:
              class: Constructor
              code: 'true'
              str: 'true'
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            todo: '[]'
        - processing
        - output:
            class: Constructor
            code: 'true'
            str: 'true'
        - returning from Expression_substitute
      - output:
          class: ADisjunction
          code: false ∨ true ∨ true
          str: 'true'
      - returning from Expression_substitute
    - output:
        class: AQuantification
        code: '∃c[color] : c ≠ red'
        str: 'true'
    - returning from Expression_substitute
  - output:
      class: Brackets
      code: '(∃c[color] : c ≠ red)'
      str: (true)
  - returning from Expression_substitute
- output:
    class: AEquivalence
    code: 'p ⇔ (∃c[color] : c ≠ red)'
    str: p
- returning from Expression_substitute
- calling Expression_substitute
- with_arguments:
    self:
      class: AQuantification
      code: '∃c[color] : q(c)'
      str: q(red) ∨ q(blue) ∨ q(green)
    e0:
      class: Constructor
      code: 'true'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    todo: '[]'
- processing
  - calling Expression_substitute
  - with_arguments:
      self:
        class: ADisjunction
        code: q(red) ∨ q(blue) ∨ q(green)
        str: q(red) ∨ q(blue) ∨ q(green)
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: q(red)
          str: q(red)
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        todo: '[]'
    - processing
      - calling Expression_substitute
      - with_arguments:
          self:
            class: Constructor
            code: red
            str: red
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          todo: '[]'
      - processing
      - output:
          class: Constructor
          code: red
          str: red
      - returning from Expression_substitute
    - output:
        class: AppliedSymbol
        code: q(red)
        str: q(red)
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: q(blue)
          str: q(blue)
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        todo: '[]'
    - processing
      - calling Expression_substitute
      - with_arguments:
          self:
            class: Constructor
            code: blue
            str: blue
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          todo: '[]'
      - processing
      - output:
          class: Constructor
          code: blue
          str: blue
      - returning from Expression_substitute
    - output:
        class: AppliedSymbol
        code: q(blue)
        str: q(blue)
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: q(green)
          str: q(green)
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        todo: '[]'
    - processing
      - calling Expression_substitute
      - with_arguments:
          self:
            class: Constructor
            code: green
            str: green
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          todo: '[]'
      - processing
      - output:
          class: Constructor
          code: green
          str: green
      - returning from Expression_substitute
    - output:
        class: AppliedSymbol
        code: q(green)
        str: q(green)
    - returning from substitute
  - output:
      class: ADisjunction
      code: q(red) ∨ q(blue) ∨ q(green)
      str: q(red) ∨ q(blue) ∨ q(green)
  - returning from Expression_substitute
- output:
    class: AQuantification
    code: '∃c[color] : q(c)'
    str: q(red) ∨ q(blue) ∨ q(green)
- returning from Expression_substitute
- calling Expression_substitute
- with_arguments:
    self:
      class: AEquivalence
      code: 'p ⇔ (∃c[color] : c ≠ red)'
      str: p
    e0:
      class: Variable
      code: p
      str: p
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: Variable
        code: p
        str: p
      e0:
        class: Variable
        code: p
        str: p
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      todo: '[]'
  - processing
  - output:
      class: Variable
      code: p
      str: 'true'
  - returning from substitute
  - calling Expression_substitute
  - with_arguments:
      self:
        class: Brackets
        code: '(∃c[color] : c ≠ red)'
        str: (true)
      e0:
        class: Variable
        code: p
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      todo: '[]'
  - processing
    - calling Expression_substitute
    - with_arguments:
        self:
          class: AQuantification
          code: '∃c[color] : c ≠ red'
          str: 'true'
        e0:
          class: Variable
          code: p
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        todo: '[]'
    - processing
      - calling Expression_substitute
      - with_arguments:
          self:
            class: ADisjunction
            code: false ∨ true ∨ true
            str: 'true'
          e0:
            class: Variable
            code: p
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          todo: '[]'
      - processing
        - calling Expression_substitute
        - with_arguments:
            self:
              class: Constructor
              code: 'true'
              str: 'true'
            e0:
              class: Variable
              code: p
              str: 'true'
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            todo: '[]'
        - processing
        - output:
            class: Constructor
            code: 'true'
            str: 'true'
        - returning from Expression_substitute
      - output:
          class: ADisjunction
          code: false ∨ true ∨ true
          str: 'true'
      - returning from Expression_substitute
    - output:
        class: AQuantification
        code: '∃c[color] : c ≠ red'
        str: 'true'
    - returning from Expression_substitute
  - output:
      class: Brackets
      code: '(∃c[color] : c ≠ red)'
      str: (true)
  - returning from Expression_substitute
- output:
    class: AEquivalence
    code: 'p ⇔ (∃c[color] : c ≠ red)'
    str: 'true'
- returning from Expression_substitute
- calling substitute
- with_arguments:
    self:
      class: Variable
      code: p
      str: 'true'
    e0:
      class: Variable
      code: p
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
- output:
    class: Variable
    code: p
    str: 'true'
- returning from substitute
- calling Expression_substitute
- with_arguments:
    self:
      class: AQuantification
      code: '∃c[color] : c ≠ red'
      str: 'true'
    e0:
      class: Variable
      code: p
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
  - calling Expression_substitute
  - with_arguments:
      self:
        class: ADisjunction
        code: false ∨ true ∨ true
        str: 'true'
      e0:
        class: Variable
        code: p
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
  - processing
    - calling Expression_substitute
    - with_arguments:
        self:
          class: Constructor
          code: 'true'
          str: 'true'
        e0:
          class: Variable
          code: p
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
    - processing
    - output:
        class: Constructor
        code: 'true'
        str: 'true'
    - returning from Expression_substitute
  - output:
      class: ADisjunction
      code: false ∨ true ∨ true
      str: 'true'
  - returning from Expression_substitute
- output:
    class: AQuantification
    code: '∃c[color] : c ≠ red'
    str: 'true'
- returning from Expression_substitute
- calling Expression_substitute
- with_arguments:
    self:
      class: AQuantification
      code: '∃c[color] : q(c)'
      str: q(red) ∨ q(blue) ∨ q(green)
    e0:
      class: Variable
      code: p
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
  - calling Expression_substitute
  - with_arguments:
      self:
        class: ADisjunction
        code: q(red) ∨ q(blue) ∨ q(green)
        str: q(red) ∨ q(blue) ∨ q(green)
      e0:
        class: Variable
        code: p
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: q(red)
          str: q(red)
        e0:
          class: Variable
          code: p
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
    - processing
      - calling Expression_substitute
      - with_arguments:
          self:
            class: Constructor
            code: red
            str: red
          e0:
            class: Variable
            code: p
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
      - processing
      - output:
          class: Constructor
          code: red
          str: red
      - returning from Expression_substitute
    - output:
        class: AppliedSymbol
        code: q(red)
        str: q(red)
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: q(blue)
          str: q(blue)
        e0:
          class: Variable
          code: p
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
    - processing
      - calling Expression_substitute
      - with_arguments:
          self:
            class: Constructor
            code: blue
            str: blue
          e0:
            class: Variable
            code: p
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
      - processing
      - output:
          class: Constructor
          code: blue
          str: blue
      - returning from Expression_substitute
    - output:
        class: AppliedSymbol
        code: q(blue)
        str: q(blue)
    - returning from substitute
    - calling substitute
    - with_arguments:
        self:
          class: AppliedSymbol
          code: q(green)
          str: q(green)
        e0:
          class: Variable
          code: p
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
    - processing
      - calling Expression_substitute
      - with_arguments:
          self:
            class: Constructor
            code: green
            str: green
          e0:
            class: Variable
            code: p
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
      - processing
      - output:
          class: Constructor
          code: green
          str: green
      - returning from Expression_substitute
    - output:
        class: AppliedSymbol
        code: q(green)
        str: q(green)
    - returning from substitute
  - output:
      class: ADisjunction
      code: q(red) ∨ q(blue) ∨ q(green)
      str: q(red) ∨ q(blue) ∨ q(green)
  - returning from Expression_substitute
- output:
    class: AQuantification
    code: '∃c[color] : q(c)'
    str: q(red) ∨ q(blue) ∨ q(green)
- returning from Expression_substitute
- calling substitute
- with_arguments:
    self:
      class: AppliedSymbol
      code: q(red)
      str: q(red)
    e0:
      class: Variable
      code: p
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
  - calling Expression_substitute
  - with_arguments:
      self:
        class: Constructor
        code: red
        str: red
      e0:
        class: Variable
        code: p
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
  - processing
  - output:
      class: Constructor
      code: red
      str: red
  - returning from Expression_substitute
- output:
    class: AppliedSymbol
    code: q(red)
    str: q(red)
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: AppliedSymbol
      code: q(blue)
      str: q(blue)
    e0:
      class: Variable
      code: p
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
  - calling Expression_substitute
  - with_arguments:
      self:
        class: Constructor
        code: blue
        str: blue
      e0:
        class: Variable
        code: p
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
  - processing
  - output:
      class: Constructor
      code: blue
      str: blue
  - returning from Expression_substitute
- output:
    class: AppliedSymbol
    code: q(blue)
    str: q(blue)
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: AppliedSymbol
      code: q(green)
      str: q(green)
    e0:
      class: Variable
      code: p
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
  - calling Expression_substitute
  - with_arguments:
      self:
        class: Constructor
        code: green
        str: green
      e0:
        class: Variable
        code: p
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
  - processing
  - output:
      class: Constructor
      code: green
      str: green
  - returning from Expression_substitute
- output:
    class: AppliedSymbol
    code: q(green)
    str: q(green)
- returning from substitute
- calling Expression_substitute
- with_arguments:
    self:
      class: AQuantification
      code: '∃c[color] : q(c)'
      str: q(red) ∨ q(blue) ∨ q(green)
    e0:
      class: AQuantification
      code: '∃c[color] : q(c)'
      str: q(red) ∨ q(blue) ∨ q(green)
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    todo: '[]'
- processing
- output:
    class: AQuantification
    code: '∃c[color] : q(c)'
    str: 'true'
- returning from Expression_substitute
- calling substitute
- with_arguments:
    self:
      class: Variable
      code: p
      str: 'true'
    e0:
      class: AQuantification
      code: '∃c[color] : q(c)'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
- output:
    class: Variable
    code: p
    str: 'true'
- returning from substitute
- calling Expression_substitute
- with_arguments:
    self:
      class: AQuantification
      code: '∃c[color] : c ≠ red'
      str: 'true'
    e0:
      class: AQuantification
      code: '∃c[color] : q(c)'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
  - calling Expression_substitute
  - with_arguments:
      self:
        class: ADisjunction
        code: false ∨ true ∨ true
        str: 'true'
      e0:
        class: AQuantification
        code: '∃c[color] : q(c)'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
  - processing
    - calling Expression_substitute
    - with_arguments:
        self:
          class: Constructor
          code: 'true'
          str: 'true'
        e0:
          class: AQuantification
          code: '∃c[color] : q(c)'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
    - processing
    - output:
        class: Constructor
        code: 'true'
        str: 'true'
    - returning from Expression_substitute
  - output:
      class: ADisjunction
      code: false ∨ true ∨ true
      str: 'true'
  - returning from Expression_substitute
- output:
    class: AQuantification
    code: '∃c[color] : c ≠ red'
    str: 'true'
- returning from Expression_substitute
- calling Expression_substitute
- with_arguments:
    self:
      class: AQuantification
      code: '∃c[color] : q(c)'
      str: 'true'
    e0:
      class: AQuantification
      code: '∃c[color] : q(c)'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
- output:
    class: AQuantification
    code: '∃c[color] : q(c)'
    str: 'true'
- returning from Expression_substitute
- calling substitute
- with_arguments:
    self:
      class: AppliedSymbol
      code: q(red)
      str: q(red)
    e0:
      class: AQuantification
      code: '∃c[color] : q(c)'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
  - calling Expression_substitute
  - with_arguments:
      self:
        class: Constructor
        code: red
        str: red
      e0:
        class: AQuantification
        code: '∃c[color] : q(c)'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
  - processing
  - output:
      class: Constructor
      code: red
      str: red
  - returning from Expression_substitute
- output:
    class: AppliedSymbol
    code: q(red)
    str: q(red)
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: AppliedSymbol
      code: q(blue)
      str: q(blue)
    e0:
      class: AQuantification
      code: '∃c[color] : q(c)'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
  - calling Expression_substitute
  - with_arguments:
      self:
        class: Constructor
        code: blue
        str: blue
      e0:
        class: AQuantification
        code: '∃c[color] : q(c)'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
  - processing
  - output:
      class: Constructor
      code: blue
      str: blue
  - returning from Expression_substitute
- output:
    class: AppliedSymbol
    code: q(blue)
    str: q(blue)
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: AppliedSymbol
      code: q(green)
      str: q(green)
    e0:
      class: AQuantification
      code: '∃c[color] : q(c)'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
- processing
  - calling Expression_substitute
  - with_arguments:
      self:
        class: Constructor
        code: green
        str: green
      e0:
        class: AQuantification
        code: '∃c[color] : q(c)'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
  - processing
  - output:
      class: Constructor
      code: green
      str: green
  - returning from Expression_substitute
- output:
    class: AppliedSymbol
    code: q(green)
    str: q(green)
- returning from substitute
- '

  Z3 propagation ********************************'