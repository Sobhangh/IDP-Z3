
- calling substitute
- with_arguments:
    self:
      class: AComparison
      code: x = 0
      str: x = 0
    e0:
      class: Constructor
      code: 'true'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      x: None
      y: None
      x = 0: None
      x + 1 = 1: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: Variable
        code: x
        str: x
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        x: None
        y: None
        x = 0: None
        x + 1 = 1: None
      todo: '[]'
  - processing
  - output:
      class: Variable
      code: x
      str: x
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: NumberConstant
        code: '0'
        str: '0'
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        x: None
        y: None
        x = 0: None
        x + 1 = 1: None
      todo: '[]'
  - processing
  - output:
      class: NumberConstant
      code: '0'
      str: '0'
  - returning from substitute
- output:
    class: AComparison
    code: x = 0
    str: x = 0
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: ~((x + 1 = 1)) ∨ (x + 1 = 1)
      str: ~((x + 1 = 1)) ∨ (x + 1 = 1)
    e0:
      class: Constructor
      code: 'true'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      x: '0'
      y: None
      x = 0: 'true'
      x + 1 = 1: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AUnary
        code: ~((x + 1 = 1))
        str: ~((x + 1 = 1))
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        x: '0'
        y: None
        x = 0: 'true'
        x + 1 = 1: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: Brackets
          code: (x + 1 = 1)
          str: (x + 1 = 1)
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          x: '0'
          y: None
          x = 0: 'true'
          x + 1 = 1: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: AComparison
            code: x + 1 = 1
            str: x + 1 = 1
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          assignments:
            x: '0'
            y: None
            x = 0: 'true'
            x + 1 = 1: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: ASumMinus
              code: x + 1
              str: x + 1
            e0:
              class: Constructor
              code: 'true'
              str: 'true'
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            assignments:
              x: '0'
              y: None
              x = 0: 'true'
              x + 1 = 1: None
            todo: '[]'
        - processing
          - calling substitute
          - with_arguments:
              self:
                class: Variable
                code: x
                str: x
              e0:
                class: Constructor
                code: 'true'
                str: 'true'
              e1:
                class: Constructor
                code: 'true'
                str: 'true'
              assignments:
                x: '0'
                y: None
                x = 0: 'true'
                x + 1 = 1: None
              todo: '[]'
          - processing
          - output:
              class: Variable
              code: x
              str: x
          - returning from substitute
          - calling substitute
          - with_arguments:
              self:
                class: NumberConstant
                code: '1'
                str: '1'
              e0:
                class: Constructor
                code: 'true'
                str: 'true'
              e1:
                class: Constructor
                code: 'true'
                str: 'true'
              assignments:
                x: '0'
                y: None
                x = 0: 'true'
                x + 1 = 1: None
              todo: '[]'
          - processing
          - output:
              class: NumberConstant
              code: '1'
              str: '1'
          - returning from substitute
        - output:
            class: ASumMinus
            code: x + 1
            str: x + 1
        - returning from substitute
        - calling substitute
        - with_arguments:
            self:
              class: NumberConstant
              code: '1'
              str: '1'
            e0:
              class: Constructor
              code: 'true'
              str: 'true'
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            assignments:
              x: '0'
              y: None
              x = 0: 'true'
              x + 1 = 1: None
            todo: '[]'
        - processing
        - output:
            class: NumberConstant
            code: '1'
            str: '1'
        - returning from substitute
      - output:
          class: AComparison
          code: x + 1 = 1
          str: x + 1 = 1
      - returning from substitute
    - output:
        class: Brackets
        code: (x + 1 = 1)
        str: (x + 1 = 1)
    - returning from substitute
  - output:
      class: AUnary
      code: ~((x + 1 = 1))
      str: ~((x + 1 = 1))
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: Brackets
        code: (x + 1 = 1)
        str: (x + 1 = 1)
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        x: '0'
        y: None
        x = 0: 'true'
        x + 1 = 1: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: AComparison
          code: x + 1 = 1
          str: x + 1 = 1
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          x: '0'
          y: None
          x = 0: 'true'
          x + 1 = 1: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: ASumMinus
            code: x + 1
            str: x + 1
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          assignments:
            x: '0'
            y: None
            x = 0: 'true'
            x + 1 = 1: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: Variable
              code: x
              str: x
            e0:
              class: Constructor
              code: 'true'
              str: 'true'
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            assignments:
              x: '0'
              y: None
              x = 0: 'true'
              x + 1 = 1: None
            todo: '[]'
        - processing
        - output:
            class: Variable
            code: x
            str: x
        - returning from substitute
        - calling substitute
        - with_arguments:
            self:
              class: NumberConstant
              code: '1'
              str: '1'
            e0:
              class: Constructor
              code: 'true'
              str: 'true'
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            assignments:
              x: '0'
              y: None
              x = 0: 'true'
              x + 1 = 1: None
            todo: '[]'
        - processing
        - output:
            class: NumberConstant
            code: '1'
            str: '1'
        - returning from substitute
      - output:
          class: ASumMinus
          code: x + 1
          str: x + 1
      - returning from substitute
      - calling substitute
      - with_arguments:
          self:
            class: NumberConstant
            code: '1'
            str: '1'
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          assignments:
            x: '0'
            y: None
            x = 0: 'true'
            x + 1 = 1: None
          todo: '[]'
      - processing
      - output:
          class: NumberConstant
          code: '1'
          str: '1'
      - returning from substitute
    - output:
        class: AComparison
        code: x + 1 = 1
        str: x + 1 = 1
    - returning from substitute
  - output:
      class: Brackets
      code: (x + 1 = 1)
      str: (x + 1 = 1)
  - returning from substitute
- output:
    class: ADisjunction
    code: ~((x + 1 = 1)) ∨ (x + 1 = 1)
    str: ~((x + 1 = 1)) ∨ (x + 1 = 1)
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: AComparison
      code: x = 0
      str: x = 0
    e0:
      class: Variable
      code: x
      str: x
    e1:
      class: NumberConstant
      code: '0'
      str: '0'
    assignments:
      x: '0'
      y: None
      x = 0: 'true'
      x + 1 = 1: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: Variable
        code: x
        str: x
      e0:
        class: Variable
        code: x
        str: x
      e1:
        class: NumberConstant
        code: '0'
        str: '0'
      assignments:
        x: '0'
        y: None
        x = 0: 'true'
        x + 1 = 1: None
      todo: '[]'
  - processing
  - output:
      class: Variable
      code: x
      str: '0'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: NumberConstant
        code: '0'
        str: '0'
      e0:
        class: Variable
        code: x
        str: '0'
      e1:
        class: NumberConstant
        code: '0'
        str: '0'
      assignments:
        x: '0'
        y: None
        x = 0: 'true'
        x + 1 = 1: None
      todo: '[]'
  - processing
  - output:
      class: NumberConstant
      code: '0'
      str: '0'
  - returning from substitute
- output:
    class: AComparison
    code: x = 0
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: ~((x + 1 = 1)) ∨ (x + 1 = 1)
      str: ~((x + 1 = 1)) ∨ (x + 1 = 1)
    e0:
      class: Variable
      code: x
      str: '0'
    e1:
      class: NumberConstant
      code: '0'
      str: '0'
    assignments:
      x: '0'
      y: None
      x = 0: 'true'
      x + 1 = 1: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AUnary
        code: ~((x + 1 = 1))
        str: ~((x + 1 = 1))
      e0:
        class: Variable
        code: x
        str: '0'
      e1:
        class: NumberConstant
        code: '0'
        str: '0'
      assignments:
        x: '0'
        y: None
        x = 0: 'true'
        x + 1 = 1: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: Brackets
          code: (x + 1 = 1)
          str: (x + 1 = 1)
        e0:
          class: Variable
          code: x
          str: '0'
        e1:
          class: NumberConstant
          code: '0'
          str: '0'
        assignments:
          x: '0'
          y: None
          x = 0: 'true'
          x + 1 = 1: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: AComparison
            code: x + 1 = 1
            str: x + 1 = 1
          e0:
            class: Variable
            code: x
            str: '0'
          e1:
            class: NumberConstant
            code: '0'
            str: '0'
          assignments:
            x: '0'
            y: None
            x = 0: 'true'
            x + 1 = 1: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: ASumMinus
              code: x + 1
              str: x + 1
            e0:
              class: Variable
              code: x
              str: '0'
            e1:
              class: NumberConstant
              code: '0'
              str: '0'
            assignments:
              x: '0'
              y: None
              x = 0: 'true'
              x + 1 = 1: None
            todo: '[]'
        - processing
          - calling substitute
          - with_arguments:
              self:
                class: Variable
                code: x
                str: x
              e0:
                class: Variable
                code: x
                str: '0'
              e1:
                class: NumberConstant
                code: '0'
                str: '0'
              assignments:
                x: '0'
                y: None
                x = 0: 'true'
                x + 1 = 1: None
              todo: '[]'
          - processing
          - output:
              class: Variable
              code: x
              str: '0'
          - returning from substitute
          - calling substitute
          - with_arguments:
              self:
                class: NumberConstant
                code: '1'
                str: '1'
              e0:
                class: Variable
                code: x
                str: '0'
              e1:
                class: NumberConstant
                code: '0'
                str: '0'
              assignments:
                x: '0'
                y: None
                x = 0: 'true'
                x + 1 = 1: None
              todo: '[]'
          - processing
          - output:
              class: NumberConstant
              code: '1'
              str: '1'
          - returning from substitute
        - output:
            class: ASumMinus
            code: x + 1
            str: '1'
        - returning from substitute
        - calling substitute
        - with_arguments:
            self:
              class: NumberConstant
              code: '1'
              str: '1'
            e0:
              class: Variable
              code: x
              str: '0'
            e1:
              class: NumberConstant
              code: '0'
              str: '0'
            assignments:
              x: '0'
              y: None
              x = 0: 'true'
              x + 1 = 1: None
            todo: '[]'
        - processing
        - output:
            class: NumberConstant
            code: '1'
            str: '1'
        - returning from substitute
      - output:
          class: AComparison
          code: x + 1 = 1
          str: 'true'
      - returning from substitute
    - output:
        class: Brackets
        code: (x + 1 = 1)
        str: (true)
    - returning from substitute
  - output:
      class: AUnary
      code: ~((x + 1 = 1))
      str: 'false'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: Brackets
        code: (x + 1 = 1)
        str: (x + 1 = 1)
      e0:
        class: Variable
        code: x
        str: '0'
      e1:
        class: NumberConstant
        code: '0'
        str: '0'
      assignments:
        x: '0'
        y: None
        x = 0: 'true'
        x + 1 = 1: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: AComparison
          code: x + 1 = 1
          str: x + 1 = 1
        e0:
          class: Variable
          code: x
          str: '0'
        e1:
          class: NumberConstant
          code: '0'
          str: '0'
        assignments:
          x: '0'
          y: None
          x = 0: 'true'
          x + 1 = 1: None
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: ASumMinus
            code: x + 1
            str: x + 1
          e0:
            class: Variable
            code: x
            str: '0'
          e1:
            class: NumberConstant
            code: '0'
            str: '0'
          assignments:
            x: '0'
            y: None
            x = 0: 'true'
            x + 1 = 1: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: Variable
              code: x
              str: x
            e0:
              class: Variable
              code: x
              str: '0'
            e1:
              class: NumberConstant
              code: '0'
              str: '0'
            assignments:
              x: '0'
              y: None
              x = 0: 'true'
              x + 1 = 1: None
            todo: '[]'
        - processing
        - output:
            class: Variable
            code: x
            str: '0'
        - returning from substitute
        - calling substitute
        - with_arguments:
            self:
              class: NumberConstant
              code: '1'
              str: '1'
            e0:
              class: Variable
              code: x
              str: '0'
            e1:
              class: NumberConstant
              code: '0'
              str: '0'
            assignments:
              x: '0'
              y: None
              x = 0: 'true'
              x + 1 = 1: None
            todo: '[]'
        - processing
        - output:
            class: NumberConstant
            code: '1'
            str: '1'
        - returning from substitute
      - output:
          class: ASumMinus
          code: x + 1
          str: '1'
      - returning from substitute
      - calling substitute
      - with_arguments:
          self:
            class: NumberConstant
            code: '1'
            str: '1'
          e0:
            class: Variable
            code: x
            str: '0'
          e1:
            class: NumberConstant
            code: '0'
            str: '0'
          assignments:
            x: '0'
            y: None
            x = 0: 'true'
            x + 1 = 1: None
          todo: '[]'
      - processing
      - output:
          class: NumberConstant
          code: '1'
          str: '1'
      - returning from substitute
    - output:
        class: AComparison
        code: x + 1 = 1
        str: 'true'
    - returning from substitute
  - output:
      class: Brackets
      code: (x + 1 = 1)
      str: (true)
  - returning from substitute
- output:
    class: ADisjunction
    code: ~((x + 1 = 1)) ∨ (x + 1 = 1)
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: AComparison
      code: x = 0
      str: 'true'
    e0:
      class: AComparison
      code: x = 0
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      x: '0'
      y: None
      x = 0: 'true'
      x + 1 = 1: None
    todo: '[]'
- processing
- output:
    class: AComparison
    code: x = 0
    str: 'true'
- returning from substitute
- '

  Z3 propagation ********************************'
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: ~((x + 1 = 1)) ∨ (x + 1 = 1)
      str: 'true'
    e0:
      class: AComparison
      code: x + 1 = 1
      str: x + 1 = 1
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      x: '0'
      y: None
      x = 0: 'true'
      x + 1 = 1: 'true'
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AUnary
        code: ~((x + 1 = 1))
        str: 'false'
      e0:
        class: AComparison
        code: x + 1 = 1
        str: x + 1 = 1
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        x: '0'
        y: None
        x = 0: 'true'
        x + 1 = 1: 'true'
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: Brackets
          code: (x + 1 = 1)
          str: (true)
        e0:
          class: AComparison
          code: x + 1 = 1
          str: x + 1 = 1
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          x: '0'
          y: None
          x = 0: 'true'
          x + 1 = 1: 'true'
        todo: '[]'
    - processing
      - calling substitute
      - with_arguments:
          self:
            class: AComparison
            code: x + 1 = 1
            str: 'true'
          e0:
            class: AComparison
            code: x + 1 = 1
            str: x + 1 = 1
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          assignments:
            x: '0'
            y: None
            x = 0: 'true'
            x + 1 = 1: 'true'
          todo: '[]'
      - processing
      - output:
          class: AComparison
          code: x + 1 = 1
          str: 'true'
      - returning from substitute
    - output:
        class: Brackets
        code: (x + 1 = 1)
        str: (true)
    - returning from substitute
  - output:
      class: AUnary
      code: ~((x + 1 = 1))
      str: 'false'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: Brackets
        code: (x + 1 = 1)
        str: (true)
      e0:
        class: AComparison
        code: x + 1 = 1
        str: x + 1 = 1
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        x: '0'
        y: None
        x = 0: 'true'
        x + 1 = 1: 'true'
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: AComparison
          code: x + 1 = 1
          str: 'true'
        e0:
          class: AComparison
          code: x + 1 = 1
          str: x + 1 = 1
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          x: '0'
          y: None
          x = 0: 'true'
          x + 1 = 1: 'true'
        todo: '[]'
    - processing
    - output:
        class: AComparison
        code: x + 1 = 1
        str: 'true'
    - returning from substitute
  - output:
      class: Brackets
      code: (x + 1 = 1)
      str: (true)
  - returning from substitute
- output:
    class: ADisjunction
    code: ~((x + 1 = 1)) ∨ (x + 1 = 1)
    str: 'true'
- returning from substitute