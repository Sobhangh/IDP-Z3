// https://dmcommunity.wordpress.com/challenge/make-a-good-burger/

vocabulary {
	type Item_t constructed from {  Beef_Patty, Bun, Cheese, Onions, Pickles, Lettuce, Ketchup, Tomato }
	type Nat_t = { 0..10000 }
	Sodium:(Item_t)→ Nat_t
	Fat:(Item_t)→ Nat_t
	Calories:(Item_t)→ Nat_t
	Cost:(Item_t)→ Nat_t
	Number:(Item_t)→ Nat_t
	Total_Sodium: ()→Nat_t
	Total_Fat: ()→Nat_t
	Total_Calories: ()→Nat_t
	Total_Cost: ()→Nat_t
}
theory {
	//NumberConstraint
	!Item[Item_t]: true => 01 =< Number(Item) & Number(Item) =< 05.

	!Item[Item_t]: Item = Lettuce => Number(Item) = Number(Ketchup).

	!Item[Item_t]: Item = Pickles => Number(Item) = Number(Tomato).

	//Determine Nutrition
	Total_Sodium() = sum{ Item[Item_t] : true: Number(Item) * Sodium(Item) }.
	Total_Fat() = sum{ Item[Item_t] : true: Number(Item) * Fat(Item) }.
	Total_Calories() = sum{ Item[Item_t] : true: Number(Item) * Calories(Item) }.
	Total_Cost() = sum{ Item[Item_t] : true: Number(Item) * Cost(Item) }.
	//Nutrition Constraints
	true => Total_Sodium() < 3000 & Total_Fat() < 150 & Total_Calories() < 3000.

}


structure {
	Sodium = {Beef_Patty → 50, Bun → 330, Cheese → 310, Onions → 1, Pickles → 260, Lettuce → 3, Ketchup → 160, Tomato → 3 } else 3
	Fat = {Beef_Patty → 17, Bun → 9, Cheese → 6, Onions → 2, Pickles → 0, Lettuce → 0, Ketchup → 0, Tomato → 0 } else 0
	Calories = {Beef_Patty → 220, Bun → 260, Cheese → 70, Onions → 10, Pickles → 5, Lettuce → 4, Ketchup → 20, Tomato → 9 } else 9
	Cost = {Beef_Patty → 25, Bun → 15, Cheese → 10, Onions → 9, Pickles → 3, Lettuce → 4, Ketchup → 2, Tomato → 4 } else 4
}
