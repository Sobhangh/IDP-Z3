

vocabulary {
	type Line_t := { First, Second, Third }
	type Digit_t := { 0..9 }
	type Number_t := { 0..1000 }
	type Syllables_t := { 0..7 }
	Allowed_Syllables(Line_t): Syllables_t
	Syllables_for_Hundreds(Digit_t): Syllables_t
	Syllables_for_Tens(Digit_t): Syllables_t
	Syllables_for_Units(Digit_t): Syllables_t
	Syllables(Line_t): Syllables_t
	Solution(Line_t): Number_t
	Hundreds(Line_t): Digit_t
	Tens(Line_t): Digit_t
	Units(Line_t): Digit_t
}
theory {
	//Syllables for every Line
	{
		!Line[Line_t]: Allowed_Syllables(Line) = 5 <- Line = First.
		!Line[Line_t]: Allowed_Syllables(Line) = 6 <- Line = Second.
		!Line[Line_t]: Allowed_Syllables(Line) = 3 <- Line = Third.
	}

	//Every line needs specific amount of syllables
	!Line[Line_t]: true => Syllables(Line) = Allowed_Syllables(Line).

	//Calculate the lines
	!Line[Line_t]: Solution(Line)  = sum{ : Line = Line: Hundreds(Line) * 100 }+sum{ : Line = Line: Tens(Line) * 10 }+sum{ : Line = Line: Units(Line) }.
	//Solutions need to add up
	true => Solution(Third) = Solution(First) + Solution(Second).

	//Calculate syllables of line
	!Line[Line_t]: Syllables(Line)  = sum{ : Line = Line: Syllables_for_Hundreds(Hundreds(Line)) }+sum{ : Line = Line: Syllables_for_Tens(Tens(Line)) }+sum{ : Line = Line: Syllables_for_Units(Units(Line)) }.
}


structure {
	Syllables_for_Hundreds := {0→ 0, 1→ 3, 2→ 3, 3→ 3, 4→ 3, 5→ 3, 6→ 3, 7→ 4, 8 → 3, 9 → 3 } else 3
	Syllables_for_Tens := {0 → 0, 1 → 7, 2 → 2, 3 → 2, 4 → 2, 5 → 2, 6 → 2, 7 → 3, 8 → 2, 9 → 2 } else 2
	Syllables_for_Units := {0 → 0, 1 → 1, 2 → 1, 3 → 1, 4 → 1, 5 → 1, 6 → 1, 7 → 2, 8 → 1, 9 → 1 } else 1
}
