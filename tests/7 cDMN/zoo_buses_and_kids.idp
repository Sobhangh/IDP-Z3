// https://dmcommunity.org/challenge/challenge-july-2018/

vocabulary {
	type Bus_t := { Big, Small }
	type Size_t := { 30..40 }
	type Price_t := { 0..4000 }
	type Kid_t := { 0..300 }
	type Amount_t := { 0..10 }
	Price:(Bus_t)→ Price_t
	Size:(Bus_t)→ Size_t
	Amount:(Bus_t)→ Amount_t
	Kids:(Bus_t)→ Kid_t
	TotalPrice: ()→Price_t
	Kids_amount: ()→Kid_t
}
theory {
	//Amount of Kids
	{
		Kids_amount() = 300 <- true.
	}

	//Calculate Total
	true => TotalPrice() = Amount(Big) * Price(Big) + Amount(Small) * Price(Small).

	//Calculate amount of bus
	!Bus in Bus_t: true => Amount(Bus) = ((Kids(Bus) - 01) - (Kids(Bus) - 01)%Size(Bus))/Size(Bus) + 01.

	//Every kid needs a bus
	Kids_amount() = sum(lambda Bus in Bus_t : Kids(Bus) ).
}


structure {
	Price := { Big → 500, Small → 400 } else 400.
	Size := { Big → 40, Small → 30 } else 30.
}
