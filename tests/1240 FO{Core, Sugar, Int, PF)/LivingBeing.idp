vocabulary {
	type LivingBeing := { Cat, Dog, Frog, Alice, Bob, Tom }
	animal, person : LivingBeing → Bool
	married : person → Bool
	spouse: married → married
	affair : married * person → Bool
	age : LivingBeing → Int
	type MarriageT := constructed from {marriage(A: LivingBeing, B: LivingBeing, date: Int)}
	Marriage : MarriageT -> Bool
}
theory {
	animal := { Cat, Dog, Frog }.
	person := { Alice, Bob, Tom }.
	spouse := { Alice → Bob, Bob → Alice }.

	! x in married: age(spouse(x))>20.
	! (x,y) in affair: x=y.
	? (x,y) in affair: true.
	!x in MarriageT: Marriage(x) <=> person(A(x)) & married(A(x)).
}


procedure main() {
	pretty_print(Theory(T).formula())
    pretty_print(model_expand(T, max=1))
}
