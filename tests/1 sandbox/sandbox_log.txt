
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: ~(p) ∨ q
      str: ~(p) ∨ q
    e0:
      class: Constructor
      code: 'true'
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      p: None
      q: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AUnary
        code: ~(p)
        str: ~(p)
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        p: None
        q: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: Variable
          code: p
          str: p
          co_constraint:
            class: AEquivalence
            code: p ⇔ true
            str: p
        e0:
          class: Constructor
          code: 'true'
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          p: None
          q: None
        todo: '[]'
    - processing
      - 'definition:'
      - calling substitute
      - with_arguments:
          self:
            class: AEquivalence
            code: p ⇔ true
            str: p
          e0:
            class: Constructor
            code: 'true'
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          assignments:
            p: None
            q: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: Variable
              code: p
              str: p
            e0:
              class: Constructor
              code: 'true'
              str: 'true'
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            assignments:
              p: None
              q: None
            todo: '[]'
        - processing
        - output:
            class: Variable
            code: p
            str: p
        - returning from substitute
        - calling substitute
        - with_arguments:
            self:
              class: Constructor
              code: 'true'
              str: 'true'
            e0:
              class: Constructor
              code: 'true'
              str: 'true'
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            assignments:
              p: None
              q: None
            todo: '[]'
        - processing
        - output:
            class: Constructor
            code: 'true'
            str: 'true'
        - returning from substitute
      - output:
          class: AEquivalence
          code: p ⇔ true
          str: p
      - returning from substitute
    - output:
        class: Variable
        code: p
        str: p
        co_constraint:
          class: AEquivalence
          code: p ⇔ true
          str: p
    - returning from substitute
  - output:
      class: AUnary
      code: ~(p)
      str: ~(p)
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: Variable
        code: q
        str: q
      e0:
        class: Constructor
        code: 'true'
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        p: None
        q: None
      todo: '[(p, true)]'
  - processing
  - output:
      class: Variable
      code: q
      str: q
  - returning from substitute
- output:
    class: ADisjunction
    code: ~(p) ∨ q
    str: ~(p) ∨ q
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: ~(p) ∨ q
      str: ~(p) ∨ q
    e0:
      class: Variable
      code: p
      str: p
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      p: 'true'
      q: None
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AUnary
        code: ~(p)
        str: ~(p)
      e0:
        class: Variable
        code: p
        str: p
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        p: 'true'
        q: None
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: Variable
          code: p
          str: p
          co_constraint:
            class: AEquivalence
            code: p ⇔ true
            str: p
        e0:
          class: Variable
          code: p
          str: p
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          p: 'true'
          q: None
        todo: '[]'
    - processing
      - 'definition:'
      - calling substitute
      - with_arguments:
          self:
            class: AEquivalence
            code: p ⇔ true
            str: p
          e0:
            class: Variable
            code: p
            str: p
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          assignments:
            p: 'true'
            q: None
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: Variable
              code: p
              str: p
            e0:
              class: Variable
              code: p
              str: p
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            assignments:
              p: 'true'
              q: None
            todo: '[]'
        - processing
        - output:
            class: Variable
            code: p
            str: 'true'
        - returning from substitute
        - calling substitute
        - with_arguments:
            self:
              class: Constructor
              code: 'true'
              str: 'true'
            e0:
              class: Variable
              code: p
              str: 'true'
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            assignments:
              p: 'true'
              q: None
            todo: '[]'
        - processing
        - output:
            class: Constructor
            code: 'true'
            str: 'true'
        - returning from substitute
      - output:
          class: AEquivalence
          code: p ⇔ true
          str: 'true'
      - returning from substitute
    - output:
        class: Variable
        code: p
        str: 'true'
        co_constraint:
          class: AEquivalence
          code: p ⇔ true
          str: 'true'
    - returning from substitute
  - output:
      class: AUnary
      code: ~(p)
      str: 'false'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: Variable
        code: q
        str: q
      e0:
        class: Variable
        code: p
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        p: 'true'
        q: None
      todo: '[]'
  - processing
  - output:
      class: Variable
      code: q
      str: q
  - returning from substitute
- output:
    class: ADisjunction
    code: ~(p) ∨ q
    str: q
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: ~(p) ∨ q
      str: q
    e0:
      class: Variable
      code: q
      str: q
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      p: 'true'
      q: 'true'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AUnary
        code: ~(p)
        str: 'false'
      e0:
        class: Variable
        code: q
        str: q
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        p: 'true'
        q: 'true'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: Variable
          code: p
          str: 'true'
          co_constraint:
            class: AEquivalence
            code: p ⇔ true
            str: 'true'
        e0:
          class: Variable
          code: q
          str: q
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          p: 'true'
          q: 'true'
    - processing
      - 'definition:'
      - calling substitute
      - with_arguments:
          self:
            class: AEquivalence
            code: p ⇔ true
            str: 'true'
          e0:
            class: Variable
            code: q
            str: q
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          assignments:
            p: 'true'
            q: 'true'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: Variable
              code: p
              str: 'true'
            e0:
              class: Variable
              code: q
              str: q
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            assignments:
              p: 'true'
              q: 'true'
        - processing
        - output:
            class: Variable
            code: p
            str: 'true'
        - returning from substitute
        - calling substitute
        - with_arguments:
            self:
              class: Constructor
              code: 'true'
              str: 'true'
            e0:
              class: Variable
              code: q
              str: q
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            assignments:
              p: 'true'
              q: 'true'
        - processing
        - output:
            class: Constructor
            code: 'true'
            str: 'true'
        - returning from substitute
      - output:
          class: AEquivalence
          code: p ⇔ true
          str: 'true'
      - returning from substitute
    - output:
        class: Variable
        code: p
        str: 'true'
        co_constraint:
          class: AEquivalence
          code: p ⇔ true
          str: 'true'
    - returning from substitute
  - output:
      class: AUnary
      code: ~(p)
      str: 'false'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: Variable
        code: q
        str: q
      e0:
        class: Variable
        code: q
        str: q
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        p: 'true'
        q: 'true'
  - processing
  - output:
      class: Variable
      code: q
      str: 'true'
  - returning from substitute
- output:
    class: ADisjunction
    code: ~(p) ∨ q
    str: 'true'
- returning from substitute
- calling substitute
- with_arguments:
    self:
      class: ADisjunction
      code: ~(p) ∨ q
      str: 'true'
    e0:
      class: Variable
      code: q
      str: 'true'
    e1:
      class: Constructor
      code: 'true'
      str: 'true'
    assignments:
      p: 'true'
      q: 'true'
    todo: '[]'
- processing
  - calling substitute
  - with_arguments:
      self:
        class: AUnary
        code: ~(p)
        str: 'false'
      e0:
        class: Variable
        code: q
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        p: 'true'
        q: 'true'
      todo: '[]'
  - processing
    - calling substitute
    - with_arguments:
        self:
          class: Variable
          code: p
          str: 'true'
          co_constraint:
            class: AEquivalence
            code: p ⇔ true
            str: 'true'
        e0:
          class: Variable
          code: q
          str: 'true'
        e1:
          class: Constructor
          code: 'true'
          str: 'true'
        assignments:
          p: 'true'
          q: 'true'
        todo: '[]'
    - processing
      - 'definition:'
      - calling substitute
      - with_arguments:
          self:
            class: AEquivalence
            code: p ⇔ true
            str: 'true'
          e0:
            class: Variable
            code: q
            str: 'true'
          e1:
            class: Constructor
            code: 'true'
            str: 'true'
          assignments:
            p: 'true'
            q: 'true'
          todo: '[]'
      - processing
        - calling substitute
        - with_arguments:
            self:
              class: Variable
              code: p
              str: 'true'
            e0:
              class: Variable
              code: q
              str: 'true'
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            assignments:
              p: 'true'
              q: 'true'
            todo: '[]'
        - processing
        - output:
            class: Variable
            code: p
            str: 'true'
        - returning from substitute
        - calling substitute
        - with_arguments:
            self:
              class: Constructor
              code: 'true'
              str: 'true'
            e0:
              class: Variable
              code: q
              str: 'true'
            e1:
              class: Constructor
              code: 'true'
              str: 'true'
            assignments:
              p: 'true'
              q: 'true'
            todo: '[]'
        - processing
        - output:
            class: Constructor
            code: 'true'
            str: 'true'
        - returning from substitute
      - output:
          class: AEquivalence
          code: p ⇔ true
          str: 'true'
      - returning from substitute
    - output:
        class: Variable
        code: p
        str: 'true'
        co_constraint:
          class: AEquivalence
          code: p ⇔ true
          str: 'true'
    - returning from substitute
  - output:
      class: AUnary
      code: ~(p)
      str: 'false'
  - returning from substitute
  - calling substitute
  - with_arguments:
      self:
        class: Variable
        code: q
        str: 'true'
      e0:
        class: Variable
        code: q
        str: 'true'
      e1:
        class: Constructor
        code: 'true'
        str: 'true'
      assignments:
        p: 'true'
        q: 'true'
      todo: '[]'
  - processing
  - output:
      class: Variable
      code: q
      str: 'true'
  - returning from substitute
- output:
    class: ADisjunction
    code: ~(p) ∨ q
    str: 'true'
- returning from substitute
- '

  Z3 propagation ********************************'