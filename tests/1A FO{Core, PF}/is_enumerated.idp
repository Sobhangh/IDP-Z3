vocabulary V {
    type color := {red, blue, green}
    Color: () → color
    opposite: (color) → color
    is_color: (color) → Bool

    type AB := {A, B}
    f: AB ⨯ AB → AB
}

structure S:V {
    opposite := {red→ green, (green)→ green}.
    f := { (A,A)→ A, (A,B)→ A, (B,A)→ B }.
    is_color := {}.
}

structure S2:V {
    opposite := {red→ green, green→ red} else blue.
    f := { (A,A)→ A, (A,B)→ A, (B,A)→ B } else B.
    is_color := {red}.
}

theory T:V {
    opposite(red) is enumerated.
    ~opposite(blue) is enumerated => opposite(blue)=blue.
    ~opposite(Color()) is enumerated.
}
theory T2:V {
    opposite(blue)=green.
    opposite(Color())=Color().
    f(A,B) is enumerated.
}
theory T4:V {
    Color() = blue.
    (f(B,B) is enumerated).
}

procedure main() {
    print("T, S")
    pretty_print(model_expand(T, S, sort=True))
    print("propagate")
    problem = Theory(T,S)
    pretty_print(str(problem.propagate().simplify().formula()))
    print("T, S2")
    pretty_print(model_expand(T, S2, sort=True))
    print("T2, S")
    pretty_print(model_expand(T2, S, sort=True))
    print("T4, S2")
    pretty_print(model_expand(T4, S2, sort=True))
}