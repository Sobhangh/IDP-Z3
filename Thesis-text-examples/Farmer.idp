vocabulary V {
    type Entity is {Farmer,Chicken,Fox,Grain}
    <ITemporal> Left : (Entity) -> Bool
    <ITemporal> Right : (Entity) -> Bool
    <Action> MoveL: (Entity) -> Bool
    <Action> MoveR: (Entity) -> Bool
    <Cause> Ct_Left : (Entity) -> Bool
    <Cause> Cf_Left : (Entity) -> Bool
    <Cause> Ct_Right : (Entity) -> Bool
    <Cause> Cf_Right : (Entity) -> Bool
    sumMove : () -> Int
}

theory LTC T:V {
    not (Now[Left(Fox)] and Now[Left(Chicken)] and not Now[Left(Farmer)]).
    not (Now[Left(Grain)] and Now[Left(Chicken)] and not Now[Left(Farmer)]).
    not (Now[Right(Fox)] and Now[Right(Chicken)] and not Now[Right(Farmer)]).
    not (Now[Right(Grain)] and Now[Right(Chicken)] and not Now[Right(Farmer)]).
    ! e in Entity : Now[MoveL(e)] => (Now[Left(e)] and Now[Left(Farmer)]).
    ! e in Entity : Now[MoveR(e)] => (Now[Right(e)] and Now[Right(Farmer)]).
    #{e in Entity: Now[MoveL(e)] or Now[MoveR(e)]} =< 1.
    !e in Entity : I_Left(e) .
    !e in Entity : not I_Right(e) .
    {
        !e in Entity : +[Right(e)] <- if e = Farmer then ? e2 in Entity:Now[MoveL(e2)] else Now[MoveL(e)].
        !e in Entity : -[Right(e)] <- if e = Farmer then ? e2 in Entity:Now[MoveR(e2)] else Now[MoveR(e)].
        !e in Entity : +[Left(e)] <- if e = Farmer then ? e2 in Entity:Now[MoveR(e2)] else Now[MoveR(e)].
        !e in Entity : -[Left(e)] <- if e = Farmer then ? e2 in Entity:Now[MoveL(e2)] else Now[MoveL(e)].
    }
}

theory T2:V{
    ? t in Time: ! e in Entity: Right(e,t).
    sumMove() = #{t in Time,e in Entity:MoveL(e,t)}+ #{ t in Time,e in Entity:MoveR(e,t)}.
}

structure S:V{
    Time := {0..10}.
}

procedure main () {
  pretty_print(model_expand(T, T2,S,timeout_seconds=100))
  //pretty_print(minimize(T, T2,S,term="sumMove()"))
}

