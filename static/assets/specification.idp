vocabulary {
    type name constructed from {triangle, quadrilateral}
    type subname constructed from
        { triangle_equilateral
        , triangle_rectangle
        , rectangle
        , square
        , irregular}
    Name : name
    Subname : subname

    type sides = {3..4}
    Vertices: sides
    Sides: sides

    type side = {1..4}
    Length(side):real
    Angle(side):real
    Perimeter:real
    Base : real
    Height: real
    Surface:real

    Convex
}

theory {
    Vertices=3 <=> Sides=3.
    Vertices=4 <=> Sides=4.
    Name=triangle      <=> Sides=3.
    Name=quadrilateral <=> Sides=4.

    Sides=3 => Convex.
    (!x[side]: 0<x=<Sides => Angle(x)<180) <=> Convex.

    // triangle
    Name=triangle <=> Perimeter = Length(1) + Length(2) + Length(3).
    Sides=3 => Angle(1) + Angle(2) + Angle(3) = 180.
    Subname=triangle_equilateral <=> Sides=3 & Length(1)=Length(2)=Length(3).
    Subname=triangle_equilateral <=> Sides=3 & (Angle(1)=60 & Angle(2)=60 & Angle(3)=60).
    Subname=triangle_rectangle <=> Sides=3 & (Angle(1)=90 | Angle(2)=90 | Angle(3)=90).

    // quadrilateral
    Name=quadrilateral <=> Perimeter = Length(1) + Length(2) + Length(3) + Length(4).
    Subname=square | Subname=rectangle <=> Sides=4 & Angle(1)=Angle(2)=Angle(3)=Angle(4)=90.
    Subname=rectangle => Length(1)=Length(3) & Length(2)=Length(4) & Length(1)~=Length(2).
    Subname=square => Length(1)=Length(2)=Length(3)=Length(4).

    // surface : not linear --> not supported by Z3!
    // 0 =< Base.
    // 0 =< Height.
    // Name=triangle => Surface = (Base * Height)/2.
    // Subname=square | Subname=rectangle => Surface = Length(1)*Length(2).

    // feasibility
    Name=triangle => Length(1) =< Length(2) + Length(3).
    Name=triangle => Length(2) =< Length(3) + Length(1).
    Name=triangle => Length(3) =< Length(1) + Length(2).

    // positive values
    0 < Vertices.
    0 < Sides.
    !x[side]: 0 =< Length(x).
    !x[side]: 0 =< Angle(x).
}