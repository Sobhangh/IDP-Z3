vocabulary {
    type type constructed from {triangle, quadrilateral}
    type subtype constructed from
        { regular_triangle
        , right_triangle
        , rectangle
        , square
        , irregular}
    Type : type
    Subtype : subtype

    Convex
    Equilateral

    type sides = {3..4}
    Vertices: sides
    Sides: sides

    type side = {1..4}
    Length(side):real
    Angle(side):real
    Perimeter:real
    Base : real
    Height: real
    Surface:real

}

theory {
    Vertices=3 <=> Sides=3.
    Vertices=4 <=> Sides=4.
    Type=triangle      <=> Sides=3.
    Type=quadrilateral <=> Sides=4.

    // General rules
    Sides=3 => Convex.
    (∀n[side]: n=<Sides => Angle(n)<180) <=> Convex.
    (∀n[side]: n=<Sides => Length(n)=Length(1)) <=> Equilateral.


    Perimeter = sum{n[side] : n=<Sides : Length(n)}.
    sum{n[side] : n=<Sides : Angle(n)} = (Sides-2)*180.

    // triangle
    Subtype=regular_triangle <=> Sides=3 & Equilateral.
    Subtype=regular_triangle <=> Sides=3 & (!n[side]: n=<Sides => Angle(n)=60).
    Subtype=right_triangle <=> Sides=3 & (?n[side]: n=<Sides & Angle(n)=90).

    // quadrilateral
    Subtype=square | Subtype=rectangle <=> Sides=4 & (!n[side]: n=<Sides => Angle(n)=90).
    Subtype=rectangle => Length(1)=Length(3) & Length(2)=Length(4) & Length(1)~=Length(2).
    Subtype=square => Sides=4 & Equilateral.

    // surface
    //Type=triangle => Surface = (Base * Height)/2.
    //Subtype=square | Subtype=rectangle => Surface = Length(1)*Length(2).
    //Subtype=irregular => Surface = -1.
    //0 =< Base.
    //0 =< Height.
    //?n[side]: n=<Sides & Length(n)=Base.

    // feasibility
    Type=triangle => Length(1) =< Length(2) + Length(3).
    Type=triangle => Length(2) =< Length(3) + Length(1).
    Type=triangle => Length(3) =< Length(1) + Length(2).

    // positive values
    0 < Vertices.
    0 < Sides.
    !x[side]: 0 =< Length(x).
    !x[side]: 0 =< Angle(x).
}